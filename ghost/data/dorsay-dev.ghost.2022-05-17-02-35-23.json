{"meta":{"exported_on":1652754923319,"version":"4.47.1"},"data":{"posts":[{"id":"60b2b0b5606a36000159f077","uuid":"9b4496fa-2621-4657-98e6-d7e8d4eea25a","title":"About this site","slug":"about","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[[\"strong\"],[\"code\"]],\"sections\":[[1,\"p\",[[0,[],0,\"Unlike posts, pages in Ghost don't appear the main feed. They're separate, individual pages which only show up when you link to them. Great for content which is important, but separate from your usual posts.\"]]],[1,\"p\",[[0,[],0,\"An about page is a great example of one you might want to set up early on so people can find out more about you, and what you do. Why should people subscribe to your site and become a member? Details help!\"]]],[1,\"blockquote\",[[0,[0],1,\"Tip: \"],[0,[],0,\"If you're reading any post or page on your site and you notice something you want to edit, you can add \"],[0,[1],1,\"/edit\"],[0,[],0,\" to the end of the URL – and you'll be taken directly to the Ghost editor.\"]]],[1,\"p\",[[0,[],0,\"Now tell the world what your site is all about.\"]]]],\"ghostVersion\":\"4.0\"}","html":"<p>Unlike posts, pages in Ghost don't appear the main feed. They're separate, individual pages which only show up when you link to them. Great for content which is important, but separate from your usual posts.</p><p>An about page is a great example of one you might want to set up early on so people can find out more about you, and what you do. Why should people subscribe to your site and become a member? Details help!</p><blockquote><strong>Tip: </strong>If you're reading any post or page on your site and you notice something you want to edit, you can add <code>/edit</code> to the end of the URL – and you'll be taken directly to the Ghost editor.</blockquote><p>Now tell the world what your site is all about.</p>","comment_id":"60b2b0b5606a36000159f077","plaintext":"Unlike posts, pages in Ghost don't appear the main feed. They're separate,\nindividual pages which only show up when you link to them. Great for content\nwhich is important, but separate from your usual posts.\n\nAn about page is a great example of one you might want to set up early on so\npeople can find out more about you, and what you do. Why should people subscribe\nto your site and become a member? Details help!\n\n> Tip: If you're reading any post or page on your site and you notice something\nyou want to edit, you can add /edit to the end of the URL – and you'll be taken\ndirectly to the Ghost editor.\nNow tell the world what your site is all about.","feature_image":null,"featured":0,"type":"page","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","author_id":"5951f5fca366002ebd5dbef7","created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1","published_at":"2021-05-29 21:23:07","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"60b2b0b5606a36000159f079","uuid":"1f845020-ac96-46b3-ac2e-838e623a9b84","title":"Contact","slug":"contact","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"image\",{\"src\":\"https://static.ghost.org/v4.0.0/images/integrations.png\",\"width\":2944,\"height\":1716,\"href\":\"https://ghost.org/integrations/?tag=forms\"}]],\"markups\":[[\"a\",[\"href\",\"https://twitter.com/ghost\"]],[\"a\",[\"href\",\"https://www.facebook.com/ghost\"]],[\"a\",[\"href\",\"https://instagram.com/ghost\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"If you want to set up a contact page for people to be able to reach out to you, the simplest way is to set up a simple page like this and list the different ways people can reach out to you.\"]]],[1,\"h3\",[[0,[],0,\"For example, here's how to reach us!\"]]],[3,\"ul\",[[[0,[0],1,\"@Ghost\"],[0,[],0,\" on Twitter\"]],[[0,[1],1,\"@Ghost\"],[0,[],0,\" on Facebook\"]],[[0,[2],1,\"@Ghost\"],[0,[],0,\" on Instagram\"]]]],[1,\"p\",[[0,[],0,\"If you prefer to use a contact form, almost all of the great embedded form services work great with Ghost and are easy to set up:\"]]],[10,0],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","html":"<p>If you want to set up a contact page for people to be able to reach out to you, the simplest way is to set up a simple page like this and list the different ways people can reach out to you.</p><h3 id=\"for-example-heres-how-to-reach-us\">For example, here's how to reach us!</h3><ul><li><a href=\"https://twitter.com/ghost\">@Ghost</a> on Twitter</li><li><a href=\"https://www.facebook.com/ghost\">@Ghost</a> on Facebook</li><li><a href=\"https://instagram.com/ghost\">@Ghost</a> on Instagram</li></ul><p>If you prefer to use a contact form, almost all of the great embedded form services work great with Ghost and are easy to set up:</p><figure class=\"kg-card kg-image-card\"><a href=\"https://ghost.org/integrations/?tag=forms\"><img src=\"https://static.ghost.org/v4.0.0/images/integrations.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"2944\" height=\"1716\"></a></figure>","comment_id":"60b2b0b5606a36000159f079","plaintext":"If you want to set up a contact page for people to be able to reach out to you,\nthe simplest way is to set up a simple page like this and list the different\nways people can reach out to you.\n\nFor example, here's how to reach us!\n * @Ghost [https://twitter.com/ghost] on Twitter\n * @Ghost [https://www.facebook.com/ghost] on Facebook\n * @Ghost [https://instagram.com/ghost] on Instagram\n\nIf you prefer to use a contact form, almost all of the great embedded form\nservices work great with Ghost and are easy to set up:\n\n[https://ghost.org/integrations/?tag=forms]","feature_image":null,"featured":0,"type":"page","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","author_id":"5951f5fca366002ebd5dbef7","created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1","published_at":"2021-05-29 21:23:08","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"60b2b0b5606a36000159f07b","uuid":"7fdc2fd9-fef9-47c6-9844-1e64dbcc97f8","title":"Privacy","slug":"privacy","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[],\"sections\":[[1,\"p\",[[0,[],0,\"Wondering how Ghost fares when it comes to privacy and GDPR rules? Good news: Ghost does not use any tracking cookies of any kind.\"]]],[1,\"p\",[[0,[],0,\"You can integrate any products, services, ads or integrations with Ghost yourself if you want to, but it's always a good idea to disclose how subscriber data will be used by putting together a privacy page.\"]]]],\"ghostVersion\":\"4.0\"}","html":"<p>Wondering how Ghost fares when it comes to privacy and GDPR rules? Good news: Ghost does not use any tracking cookies of any kind.</p><p>You can integrate any products, services, ads or integrations with Ghost yourself if you want to, but it's always a good idea to disclose how subscriber data will be used by putting together a privacy page.</p>","comment_id":"60b2b0b5606a36000159f07b","plaintext":"Wondering how Ghost fares when it comes to privacy and GDPR rules? Good news:\nGhost does not use any tracking cookies of any kind.\n\nYou can integrate any products, services, ads or integrations with Ghost\nyourself if you want to, but it's always a good idea to disclose how subscriber\ndata will be used by putting together a privacy page.","feature_image":null,"featured":0,"type":"page","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","author_id":"5951f5fca366002ebd5dbef7","created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1","published_at":"2021-05-29 21:23:09","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"60b2b0b5606a36000159f07d","uuid":"86ea28e6-dd24-49c3-9594-55d1297a77a2","title":"Contribute","slug":"contribute","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[[\"a\",[\"href\",\"https://github.com/tryghost\"]],[\"a\",[\"href\",\"https://github.com/sponsors/TryGhost\"]],[\"a\",[\"href\",\"https://opencollective.com/ghost\"]],[\"strong\"]],\"sections\":[[1,\"p\",[[0,[],0,\"Oh hey, you clicked every link of our starter content and even clicked this small link in the footer! If you like Ghost and you're enjoying the product so far, we'd hugely appreciate your support in any way you care to show it.\"]]],[1,\"p\",[[0,[],0,\"Ghost is a non-profit organization, and we give away all our intellectual property as open source software. If you believe in what we do, there are a number of ways you can give us a hand, and we hugely appreciate all of them:\"]]],[3,\"ul\",[[[0,[],0,\"Contribute code via \"],[0,[0],1,\"GitHub\"]],[[0,[],0,\"Contribute financially via \"],[0,[1],1,\"GitHub Sponsors\"]],[[0,[],0,\"Contribute financially via \"],[0,[2],1,\"Open Collective\"]],[[0,[],0,\"Contribute reviews via \"],[0,[3],1,\"writing a blog post\"]],[[0,[],0,\"Contribute good vibes via \"],[0,[3],1,\"telling your friends\"],[0,[],0,\" about us\"]]]],[1,\"p\",[[0,[],0,\"Thanks for checking us out!\"]]]],\"ghostVersion\":\"4.0\"}","html":"<p>Oh hey, you clicked every link of our starter content and even clicked this small link in the footer! If you like Ghost and you're enjoying the product so far, we'd hugely appreciate your support in any way you care to show it.</p><p>Ghost is a non-profit organization, and we give away all our intellectual property as open source software. If you believe in what we do, there are a number of ways you can give us a hand, and we hugely appreciate all of them:</p><ul><li>Contribute code via <a href=\"https://github.com/tryghost\">GitHub</a></li><li>Contribute financially via <a href=\"https://github.com/sponsors/TryGhost\">GitHub Sponsors</a></li><li>Contribute financially via <a href=\"https://opencollective.com/ghost\">Open Collective</a></li><li>Contribute reviews via <strong>writing a blog post</strong></li><li>Contribute good vibes via <strong>telling your friends</strong> about us</li></ul><p>Thanks for checking us out!</p>","comment_id":"60b2b0b5606a36000159f07d","plaintext":"Oh hey, you clicked every link of our starter content and even clicked this\nsmall link in the footer! If you like Ghost and you're enjoying the product so\nfar, we'd hugely appreciate your support in any way you care to show it.\n\nGhost is a non-profit organization, and we give away all our intellectual\nproperty as open source software. If you believe in what we do, there are a\nnumber of ways you can give us a hand, and we hugely appreciate all of them:\n\n * Contribute code via GitHub [https://github.com/tryghost]\n * Contribute financially via GitHub Sponsors\n   [https://github.com/sponsors/TryGhost]\n * Contribute financially via Open Collective [https://opencollective.com/ghost]\n * Contribute reviews via writing a blog post\n * Contribute good vibes via telling your friends about us\n\nThanks for checking us out!","feature_image":null,"featured":0,"type":"page","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","author_id":"5951f5fca366002ebd5dbef7","created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1","published_at":"2021-05-29 21:23:10","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"60b2c7338e987b0001441824","uuid":"365392b9-6333-4275-9ada-08860867b58b","title":"Git clone and cd in one command","slug":"git-clone-and-cd-in-one-command","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"```shell\\n~$ cd Documents/Projects\\n~/Documents/Projects$ git clone git@github.com:Bailey-Nelson/pipeline.git\\n~/Documents/Projects$ cd pipeline\\n~/Documents/Projects/pipeline$ code .\\n```\"}],[\"markdown\",{\"markdown\":\"```shell\\n~$ switch pipeline\\nCloning into '~/dev/github.com/bailey-nelson/pipeline'...\\nswitching to \\\"pipeline\\\"\\n~/dev/github.com/bailey-nelson/pipeline$ code .\\n```\"}],[\"bookmark\",{\"url\":\"https://github.com/Bailey-Nelson/switch\",\"metadata\":{\"url\":\"https://github.com/Bailey-Nelson/switch\",\"title\":\"Bailey-Nelson/switch\",\"description\":\"switch to a specified github repository; clone if not found locally - Bailey-Nelson/switch\",\"author\":\"Bailey-Nelson\",\"publisher\":\"GitHub\",\"thumbnail\":\"https://opengraph.githubassets.com/f48f8bbeb9ecf45a5da491ae9b8394d87427e9a79aa8a90345751858cccf9553/Bailey-Nelson/switch\",\"icon\":\"https://github.githubassets.com/favicons/favicon.svg\"}}]],\"markups\":[[\"code\"]],\"sections\":[[1,\"p\",[[0,[],0,\"I do most of my work from my company-provided 13\\\" MacBook Pro. I like its small and portable form factor that allows me to work from the office or from wherever I happen to be when inspiration hits. I also get the opportunity to work from home occasionally which I like to take advantage of. In 2015 I built a desktop computer to play games on but over the years I've become very productive when performing work tasks on it.\"]]],[1,\"p\",[[0,[],0,\"I prefer to keep my disks as minimalist as possible and the Bailey Nelson GitHub organization has over 30 repositories on it so I tend to only clone repos as I need them and delete them from my computer when I'm done with a task. The process of cloning repos every time I want to do some work isn't really a time consuming one but I did notice that I was using some repetitive keystrokes. Every time I sat down to do work I'd look up the repo name in GitHub and then open a terminal and type something like this:\"]]],[10,0],[1,\"p\",[[0,[],0,\"This leaves me with a terminal open to my project directory and Visual Studio Code window open looking at my code. It's how I start most of my from-home days and I thought it was just a few more keystrokes than I felt I needed to type each morning. This is certainly a first world problem but, as developers, what good are we if we're not constantly improving? I decided to write a quick script that would simplify this process. With this script my new workflow is 2 commands instead of 4.\"]]],[10,1],[1,\"p\",[[0,[],0,\"Firstly this saves a bit of time and a few keystrokes when cloning repos from GitHub. Secondly I find this helps me quickly change directories to a local repo when my terminal is at some completely different location without having to think about where the target repo is relatively. For example if my terminal is at \"],[0,[0],1,\"/etc/update-motd.d/\"],[0,[],0,\" and I want to switch to a local git repo I don't need to type \"],[0,[0],1,\"cd ~/dev/github.com/bailey-nelson/pipeline\"],[0,[],0,\". Or if my terminal is at \"],[0,[0],1,\"~/dev/github.com/brymastr/blog/themes\"],[0,[],0,\" I don't need to figure out how to navigate to where I want to go with a bunch of dots like \"],[0,[0],1,\"../../../bailey-nelson/pipeline\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"I needed to decide on a folder structure for repos cloned with this script. I decided on \"],[0,[0],1,\"~/dev/github.com/<org name>/<repo name>\"],[0,[],0,\" as I've seen it in two other companies recently and it's been working for me. In theory it doesn't really matter where repos are cloned to if you use \"],[0,[0],1,\"switch\"],[0,[],0,\" for every project since the structure is handled and locality relativity is irrelevant.\"]]],[1,\"p\",[[0,[],0,\"It's a slight improvement that was fun to write. The script is public on the Bailey Nelson GitHub repository available at the link below. Feel free to install it for your own use or fork it to make your own tweaks.\"]]],[10,2],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","html":"<p>I do most of my work from my company-provided 13\" MacBook Pro. I like its small and portable form factor that allows me to work from the office or from wherever I happen to be when inspiration hits. I also get the opportunity to work from home occasionally which I like to take advantage of. In 2015 I built a desktop computer to play games on but over the years I've become very productive when performing work tasks on it.</p><p>I prefer to keep my disks as minimalist as possible and the Bailey Nelson GitHub organization has over 30 repositories on it so I tend to only clone repos as I need them and delete them from my computer when I'm done with a task. The process of cloning repos every time I want to do some work isn't really a time consuming one but I did notice that I was using some repetitive keystrokes. Every time I sat down to do work I'd look up the repo name in GitHub and then open a terminal and type something like this:</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">~$ cd Documents/Projects\n~/Documents/Projects$ git clone git@github.com:Bailey-Nelson/pipeline.git\n~/Documents/Projects$ cd pipeline\n~/Documents/Projects/pipeline$ code .\n</code></pre>\n<!--kg-card-end: markdown--><p>This leaves me with a terminal open to my project directory and Visual Studio Code window open looking at my code. It's how I start most of my from-home days and I thought it was just a few more keystrokes than I felt I needed to type each morning. This is certainly a first world problem but, as developers, what good are we if we're not constantly improving? I decided to write a quick script that would simplify this process. With this script my new workflow is 2 commands instead of 4.</p><!--kg-card-begin: markdown--><pre><code class=\"language-shell\">~$ switch pipeline\nCloning into '~/dev/github.com/bailey-nelson/pipeline'...\nswitching to &quot;pipeline&quot;\n~/dev/github.com/bailey-nelson/pipeline$ code .\n</code></pre>\n<!--kg-card-end: markdown--><p>Firstly this saves a bit of time and a few keystrokes when cloning repos from GitHub. Secondly I find this helps me quickly change directories to a local repo when my terminal is at some completely different location without having to think about where the target repo is relatively. For example if my terminal is at <code>/etc/update-motd.d/</code> and I want to switch to a local git repo I don't need to type <code>cd ~/dev/github.com/bailey-nelson/pipeline</code>. Or if my terminal is at <code>~/dev/github.com/brymastr/blog/themes</code> I don't need to figure out how to navigate to where I want to go with a bunch of dots like <code>../../../bailey-nelson/pipeline</code>.</p><p>I needed to decide on a folder structure for repos cloned with this script. I decided on <code>~/dev/github.com/&lt;org name&gt;/&lt;repo name&gt;</code> as I've seen it in two other companies recently and it's been working for me. In theory it doesn't really matter where repos are cloned to if you use <code>switch</code> for every project since the structure is handled and locality relativity is irrelevant.</p><p>It's a slight improvement that was fun to write. The script is public on the Bailey Nelson GitHub repository available at the link below. Feel free to install it for your own use or fork it to make your own tweaks.</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://github.com/Bailey-Nelson/switch\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Bailey-Nelson/switch</div><div class=\"kg-bookmark-description\">switch to a specified github repository; clone if not found locally - Bailey-Nelson/switch</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://github.githubassets.com/favicons/favicon.svg\"><span class=\"kg-bookmark-author\">GitHub</span><span class=\"kg-bookmark-publisher\">Bailey-Nelson</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://opengraph.githubassets.com/f48f8bbeb9ecf45a5da491ae9b8394d87427e9a79aa8a90345751858cccf9553/Bailey-Nelson/switch\"></div></a></figure>","comment_id":"60b2c7338e987b0001441824","plaintext":"I do most of my work from my company-provided 13\" MacBook Pro. I like its small\nand portable form factor that allows me to work from the office or from wherever\nI happen to be when inspiration hits. I also get the opportunity to work from\nhome occasionally which I like to take advantage of. In 2015 I built a desktop\ncomputer to play games on but over the years I've become very productive when\nperforming work tasks on it.\n\nI prefer to keep my disks as minimalist as possible and the Bailey Nelson GitHub\norganization has over 30 repositories on it so I tend to only clone repos as I\nneed them and delete them from my computer when I'm done with a task. The\nprocess of cloning repos every time I want to do some work isn't really a time\nconsuming one but I did notice that I was using some repetitive keystrokes.\nEvery time I sat down to do work I'd look up the repo name in GitHub and then\nopen a terminal and type something like this:\n\n~$ cd Documents/Projects\n~/Documents/Projects$ git clone git@github.com:Bailey-Nelson/pipeline.git\n~/Documents/Projects$ cd pipeline\n~/Documents/Projects/pipeline$ code .\n\n\nThis leaves me with a terminal open to my project directory and Visual Studio\nCode window open looking at my code. It's how I start most of my from-home days\nand I thought it was just a few more keystrokes than I felt I needed to type\neach morning. This is certainly a first world problem but, as developers, what\ngood are we if we're not constantly improving? I decided to write a quick script\nthat would simplify this process. With this script my new workflow is 2 commands\ninstead of 4.\n\n~$ switch pipeline\nCloning into '~/dev/github.com/bailey-nelson/pipeline'...\nswitching to \"pipeline\"\n~/dev/github.com/bailey-nelson/pipeline$ code .\n\n\nFirstly this saves a bit of time and a few keystrokes when cloning repos from\nGitHub. Secondly I find this helps me quickly change directories to a local repo\nwhen my terminal is at some completely different location without having to\nthink about where the target repo is relatively. For example if my terminal is\nat /etc/update-motd.d/ and I want to switch to a local git repo I don't need to\ntype cd ~/dev/github.com/bailey-nelson/pipeline. Or if my terminal is at \n~/dev/github.com/brymastr/blog/themes I don't need to figure out how to navigate\nto where I want to go with a bunch of dots like ../../../bailey-nelson/pipeline.\n\nI needed to decide on a folder structure for repos cloned with this script. I\ndecided on ~/dev/github.com/<org name>/<repo name> as I've seen it in two other\ncompanies recently and it's been working for me. In theory it doesn't really\nmatter where repos are cloned to if you use switch for every project since the\nstructure is handled and locality relativity is irrelevant.\n\nIt's a slight improvement that was fun to write. The script is public on the\nBailey Nelson GitHub repository available at the link below. Feel free to\ninstall it for your own use or fork it to make your own tweaks.\n\nBailey-Nelson/switchswitch to a specified github repository; clone if not found\nlocally - Bailey-Nelson/switchGitHubBailey-Nelson\n[https://github.com/Bailey-Nelson/switch]","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","author_id":"1","created_at":"2021-05-29 22:58:59","created_by":"1","updated_at":"2021-05-31 00:29:15","updated_by":"1","published_at":"2019-10-27 23:00:00","published_by":"1","custom_excerpt":"I made a quick little script to save myself a few keystrokes when working with multiple git repositories.","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"60b2c8d6351df9000153b62d","uuid":"78587fb6-a869-4c1b-bd23-03d086d9dc14","title":"Accidentally sharing a volume between Redis containers","slug":"accidentally-sharing-a-volume-between-redis-containers","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"code\",{\"code\":\"version: \\\"3.7\\\"\\nservices:\\n  ...\\n  \\n  redis1:\\n    image: \\\"redis:5.0.3-alpine\\\"\\n    volumes:\\n      - ./cache1:/data\\n      \\n  redis2:\\n    image: \\\"redis:5.0.3-alpine\\\"\\n    volumes:\\n      - ./cache2:/data\\n\\nvolumes:\\n  ...\",\"language\":\"yaml\"}],[\"code\",{\"code\":\"version: \\\"3.7\\\"\\nservices:\\n  ...\\n  \\n  redis1:\\n    image: \\\"redis:5.0.3-alpine\\\"\\n    volumes:\\n      - cache:/data\\n      \\n  redis2:\\n    image: \\\"redis:5.0.3-alpine\\\"\\n    volumes:\\n      - cache:/data\\n\\nvolumes:\\n  ...\\n  cache:\",\"language\":\"yaml\"}],[\"code\",{\"code\":\"version: \\\"3.7\\\"\\nservices:\\n  ...\\n  \\n  redis1:\\n    image: \\\"redis:5.0.3-alpine\\\"\\n    volumes:\\n      - cache1:/data\\n      \\n  redis2:\\n    image: \\\"redis:5.0.3-alpine\\\"\\n    volumes:\\n      - cache2:/data\\n\\nvolumes:\\n  ...\\n  cache1:\\n  cache2:\",\"language\":\"yaml\"}]],\"markups\":[[\"a\",[\"href\",\"https://hub.docker.com/_/redis\"]],[\"code\"],[\"a\",[\"href\",\"https://docs.docker.com/compose/compose-file/\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"I made a dumb mistake a few months back with one of my projects at work. I was doing some refactoring on a group of services orchestrated with Docker Compose and I noticed some shortcomings in the way I had set up a couple Redis databases. With the \"],[0,[0],1,\"Redis docker image\"],[0,[],0,\" you can persist your data to disk in order to withstand server restarts. The way this is done is by creating a Docker volume and mounting the \"],[0,[1],1,\"/data\"],[0,[],0,\" directory. This is how I had things set up originally:\"]]],[10,0],[1,\"p\",[[0,[],0,\"This resulted in two directories being created at the root of the project directory with one per service. I'd read about using \"],[0,[2],1,\"Docker named volumes\"],[0,[],0,\" especially in Docker Compose and wanted to switch to that instead of creating directories I'd never need to access. I switched my volume configuration to this:\"]]],[10,1],[1,\"p\",[[0,[],0,\"I assumed that each service would create its own directories in the named \"],[0,[1],1,\"cache\"],[0,[],0,\" volume like \"],[0,[1],1,\"cache:/redis1\"],[0,[],0,\" and \"],[0,[1],1,\"cache:/redis2\"],[0,[],0,\". What really happened though was that all data created in one redis instances was available in both instances. In real life my services are not called redis1 and redis2 and are used to store different kinds of data. This took me way too long to notice and it was a major inconvenience to fix it. As far as I can tell you can't and shouldn't share named volumes between services unless it's a single scaled service. My solution was to create a separate named volume for each service.\"]]],[10,2],[1,\"p\",[[0,[],0,\"This is just a quick story about a misunderstanding I had that wasted a lot of time. I hope this can save someone from the same frustration.\"]]]],\"ghostVersion\":\"4.0\"}","html":"<p>I made a dumb mistake a few months back with one of my projects at work. I was doing some refactoring on a group of services orchestrated with Docker Compose and I noticed some shortcomings in the way I had set up a couple Redis databases. With the <a href=\"https://hub.docker.com/_/redis\">Redis docker image</a> you can persist your data to disk in order to withstand server restarts. The way this is done is by creating a Docker volume and mounting the <code>/data</code> directory. This is how I had things set up originally:</p><pre><code class=\"language-yaml\">version: \"3.7\"\nservices:\n  ...\n  \n  redis1:\n    image: \"redis:5.0.3-alpine\"\n    volumes:\n      - ./cache1:/data\n      \n  redis2:\n    image: \"redis:5.0.3-alpine\"\n    volumes:\n      - ./cache2:/data\n\nvolumes:\n  ...</code></pre><p>This resulted in two directories being created at the root of the project directory with one per service. I'd read about using <a href=\"https://docs.docker.com/compose/compose-file/\">Docker named volumes</a> especially in Docker Compose and wanted to switch to that instead of creating directories I'd never need to access. I switched my volume configuration to this:</p><pre><code class=\"language-yaml\">version: \"3.7\"\nservices:\n  ...\n  \n  redis1:\n    image: \"redis:5.0.3-alpine\"\n    volumes:\n      - cache:/data\n      \n  redis2:\n    image: \"redis:5.0.3-alpine\"\n    volumes:\n      - cache:/data\n\nvolumes:\n  ...\n  cache:</code></pre><p>I assumed that each service would create its own directories in the named <code>cache</code> volume like <code>cache:/redis1</code> and <code>cache:/redis2</code>. What really happened though was that all data created in one redis instances was available in both instances. In real life my services are not called redis1 and redis2 and are used to store different kinds of data. This took me way too long to notice and it was a major inconvenience to fix it. As far as I can tell you can't and shouldn't share named volumes between services unless it's a single scaled service. My solution was to create a separate named volume for each service.</p><pre><code class=\"language-yaml\">version: \"3.7\"\nservices:\n  ...\n  \n  redis1:\n    image: \"redis:5.0.3-alpine\"\n    volumes:\n      - cache1:/data\n      \n  redis2:\n    image: \"redis:5.0.3-alpine\"\n    volumes:\n      - cache2:/data\n\nvolumes:\n  ...\n  cache1:\n  cache2:</code></pre><p>This is just a quick story about a misunderstanding I had that wasted a lot of time. I hope this can save someone from the same frustration.</p>","comment_id":"60b2c8d6351df9000153b62d","plaintext":"I made a dumb mistake a few months back with one of my projects at work. I was\ndoing some refactoring on a group of services orchestrated with Docker Compose\nand I noticed some shortcomings in the way I had set up a couple Redis\ndatabases. With the Redis docker image [https://hub.docker.com/_/redis] you can\npersist your data to disk in order to withstand server restarts. The way this is\ndone is by creating a Docker volume and mounting the /data directory. This is\nhow I had things set up originally:\n\nversion: \"3.7\"\nservices:\n  ...\n  \n  redis1:\n    image: \"redis:5.0.3-alpine\"\n    volumes:\n      - ./cache1:/data\n      \n  redis2:\n    image: \"redis:5.0.3-alpine\"\n    volumes:\n      - ./cache2:/data\n\nvolumes:\n  ...\n\nThis resulted in two directories being created at the root of the project\ndirectory with one per service. I'd read about using Docker named volumes\n[https://docs.docker.com/compose/compose-file/] especially in Docker Compose and\nwanted to switch to that instead of creating directories I'd never need to\naccess. I switched my volume configuration to this:\n\nversion: \"3.7\"\nservices:\n  ...\n  \n  redis1:\n    image: \"redis:5.0.3-alpine\"\n    volumes:\n      - cache:/data\n      \n  redis2:\n    image: \"redis:5.0.3-alpine\"\n    volumes:\n      - cache:/data\n\nvolumes:\n  ...\n  cache:\n\nI assumed that each service would create its own directories in the named cache \nvolume like cache:/redis1 and cache:/redis2. What really happened though was\nthat all data created in one redis instances was available in both instances. In\nreal life my services are not called redis1 and redis2 and are used to store\ndifferent kinds of data. This took me way too long to notice and it was a major\ninconvenience to fix it. As far as I can tell you can't and shouldn't share\nnamed volumes between services unless it's a single scaled service. My solution\nwas to create a separate named volume for each service.\n\nversion: \"3.7\"\nservices:\n  ...\n  \n  redis1:\n    image: \"redis:5.0.3-alpine\"\n    volumes:\n      - cache1:/data\n      \n  redis2:\n    image: \"redis:5.0.3-alpine\"\n    volumes:\n      - cache2:/data\n\nvolumes:\n  ...\n  cache1:\n  cache2:\n\nThis is just a quick story about a misunderstanding I had that wasted a lot of\ntime. I hope this can save someone from the same frustration.","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","author_id":"1","created_at":"2021-05-29 23:05:58","created_by":"1","updated_at":"2021-05-29 23:21:13","updated_by":"1","published_at":"2019-10-26 23:08:00","published_by":"1","custom_excerpt":"I had a misunderstanding of how Docker named volumes work that cost me a lot of time.","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"60b2c95c351df9000153b642","uuid":"36ae4f06-4ea8-46e5-a6b3-600a4391c0cc","title":"AWS VPCs and Docker Networks","slug":"aws-vpcs-and-docker-networks","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"hr\",{}]],\"markups\":[[\"code\"],[\"strong\"],[\"a\",[\"href\",\"https://help.ubuntu.com/community/UFW\"]],[\"a\",[\"href\",\"https://wiki.archlinux.org/index.php/iptables\"]],[\"a\",[\"href\",\"https://stackoverflow.com/questions/50514275/docker-bridge-conflicts-with-host-network\"]]],\"sections\":[[1,\"h3\",[[0,[],0,\"TLDR:\"]]],[1,\"p\",[[0,[],0,\"I recently ran into an issue where I lost SSH access to one of my primary environments. I spent 12 hours on my own and 3 with AWS support trying to troubleshoot this problem. In the end I found that the problem was an IP address conflict between Docker and a peered VPC.\"]]],[10,0],[1,\"h3\",[[0,[],0,\"Situation\"]]],[1,\"p\",[[0,[],0,\"Our AWS usage has drastically increased over the past two years. We have been working on several integration projects for the purposes of automated marketing, business intelligence, and several customer-facing features. Our most recent project is a new customer offering that should be an exciting one to follow. From a technical perspective it’s not all that exceptional and consists of a new page on our ecommerce site, a new API with 3 endpoints, a relatively low-traffic Redis cache, and a new Docker network.\"]]],[1,\"p\",[[0,[],0,\"Before I was ready to deploy any portions of this new offering I wanted to increase the security and maturity of our EC2 instances in terms of SSH and HTTP.\"]]],[1,\"h3\",[[0,[],0,\"Better Security\"]]],[1,\"p\",[[0,[],0,\"Originally the EC2 instances for various projects were running on a suboptimal security and access design where specific IPs were whitelisted for SSH access and most instances were allowing HTTP on 80 and 443 from any IP. I was unhappy with this strategy as non-static IP addresses tend to change and it’s difficult to stay up to date with the list of whitelisted IPs and which organization related locations they represent. Not to mention the vulnerability of unauthorized SSH connection attempts and HTTP traffic.\"]]],[1,\"p\",[[0,[],0,\"Before I describe my new approach I need to explain our slightly less than common AWS VPC configuration. We function primarily out of two VPCs peered together with differing IP supernets in order to separate core operations from marketing and analytics. VPC A uses the default IP CIDR of \"],[0,[0],1,\"172.31.0.0/16\"],[0,[],0,\" while VPC B uses the \"],[0,[0],1,\"10.0.0.0/16\"],[0,[],0,\" CIDR supernet. This was done to avoid any potential networking conflicts. VPC A consists entirely of private subnets and is only accessible behind a VPN running within. VPC B has some customer-facing services but is otherwise entirely private. At this point, for various reasons, we only had a VPN configured to access VPC A and not VPC B.\"]]],[1,\"p\",[[0,[],0,\"My new design was to set up a small bastion server in VPC A and to use the VPN from VPC A to SSH into it as an SSH entry point for all environments in VPC B. The bastion would contain the SSH key and IPs of all other environments for the project in question. I would set up a new fleet of security groups to allow for HTTP and SSH traffic over the appropriate ports between the appropriate environments.\"]]],[1,\"p\",[[0,[],0,\"An oversimplified diagram of my new approach to our VPC and EC2 security setup for this project.  THIS WAS SUPPOSED TO BE AN IMAGE BUT I LOST IT\"]]],[1,\"p\",[[0,[],0,\"I was able to execute on this plan and had tested that all connections and services were functioning as expected. Once security was up to standard I was ready to deploy the aforementioned new feature to our development, and subsequently production, environment.\"]]],[1,\"h3\",[[0,[1],1,\"Problem\"]]],[1,\"p\",[[0,[],0,\"The deployment to the development environment went smoothly and I was able to test that things still worked. When I moved on to production and ran \"],[0,[0],1,\"docker-compose up\"],[0,[],0,\" I saw that the new services and networks had come up but also that my connection to the server had frozen. I closed the terminal window and attempted to reconnect to the server but the connection refused to work. I’d seen this sort of connection issue before many times and it almost always signified a security group misconfiguration which made a lot of sense to me at the time as I had just finished revamping my security groups.\"]]],[1,\"p\",[[0,[],0,\"ssh hangs when attempting to access the production instance THIS WAS SUPPOSED TO BE AN IMAGE BUT I LOST IT\"]]],[1,\"p\",[[0,[],0,\"After taking a deep look at my security groups and concluding that things were done correctly I made a secondary conclusion that I must be really wrong in my understanding of how security groups work. I was completely baffled as to why I could access the Development environment but could not access the Production environment despite the fact that both machines were running the same OS with the same code and same security groups.\"]]],[1,\"p\",[[0,[],0,\"After a day and a half of troubleshooting this problem on my own I decided to open a ticket with AWS support. Together we tried everything I’d already done as well as some other ideas that the support agent came up with. They raised the idea of temporarily assigning a public IP and a new security group that allows for SSH access from our office IP address. This is basically the same configuration I had before my security group overhaul so I thought it could work and, sure enough, I was able to SSH into the production server via this method.\"]]],[1,\"p\",[[0,[],0,\"The course of action now was to find out what was wrong with the software running in the Production environment and how it was different from the fully functioning Development environment. Both Ubuntu machines had the same \"],[0,[2],1,\"UFW\"],[0,[],0,\" configuration, the same \"],[0,[3],1,\"iptables\"],[0,[],0,\" structure, and were located within the same availability zone and subnet.\"]]],[1,\"h3\",[[0,[1],1,\"A Promising Solution\"]]],[1,\"p\",[[0,[],0,\"Since I had success with the temporary workaround public IP and open security group and had likely narrowed the problem down to software running on the instance I decided to take all of my accumulated troubleshooting results and go back to Google the next morning to see what I could find. At this point I was so tired and frustrated that I don’t remember exactly what search terms I used but I came across \"],[0,[4],1,\"a promising StackOverflow\"],[0,[],0,\" post discussing how Docker networks can sometimes conflict with existing subnets. The post described how, by default, docker networks are created in the \"],[0,[0],1,\"172.N.0.0/16\"],[0,[],0,\" range of IPs, where N is a somewhat random number that seems to fall between 15 and 35. This prompted me to investigate which subnets the docker networks were being assigned on my problematic VM. I ran \"],[0,[0],1,\"docker network list\"],[0,[],0,\" to view a list of networks with their IDs.\"]]],[1,\"p\",[[0,[],0,\"docker network list. network names redacted THIS WAS SUPPOSED TO BE AN IMAGE BUT I LOST IT\"]]],[1,\"p\",[[0,[],0,\"That output a list of the docker networks running on the instance. I then ran \"],[0,[0],1,\"docker network inspect <NETWORK ID>\"],[0,[],0,\" on each network ID to view the assigned subnet and mask. The allocated subnets were \"],[0,[0],1,\"172.30.0.0/16\"],[0,[],0,\", \"],[0,[0],1,\"172.31.0.0/16\"],[0,[],0,\", all the way to \"],[0,[0],1,\"172.38.0.0/16\"],[0,[],0,\". If you recall from earlier I mentioned that VPC A, the VPC that the bastion was running in, is assigned the \"],[0,[0],1,\"172.31.0.0/16\"],[0,[],0,\" CIDR block. AHAAA!\"]]],[1,\"p\",[[0,[],0,\"This is clearly a conflict! It provides an explanation as to why SSH stopped functioning from the bastion as well as why SSH did function over the public IP. This was such fantastic news and lifted my spirits significantly enough to continue fixing things up, even though I had seriously considered giving up on many occasions over the past two days.\"]]],[1,\"p\",[[0,[],0,\"Why then did my Development environment not run into the same issue when creating that same new docker network? I ran the same docker network inspect command on each of the networks in Development and found that the subnets ranged from \"],[0,[0],1,\"172.21.0.0/16\"],[0,[],0,\" to \"],[0,[0],1,\"172.29.0.0/16\"],[0,[],0,\". I couldn’t find clear documentation on how Docker chooses to assign subnets to new networks but as far as I can tell it’s random. Maybe there is something else on the VM using \"],[0,[0],1,\"172.0.x.x\"],[0,[],0,\" to \"],[0,[0],1,\"172.20.x.x\"],[0,[],0,\" but for my concerns the only reason my Production instance was affected and not my Development instance was pure chance.\"]]],[1,\"h3\",[[0,[1],1,\"Back to Productivity\"]]],[1,\"p\",[[0,[],0,\"This was the most frustrating and baffling problem I’ve had to work on recently and there were several moments where I seriously considered starting from scratch. There were also moments where I wondered how I’d ever sleep again or even call myself a developer if I couldn’t figure this out. I felt I had let down myself, my peers, and my company. Upon solving the issue though I realized I learned several valuable lessons in DevOps and gained a much deeper understanding of the AWS network stack as a whole. I'm a better developer because of this experience but I still occasionally hate AWS.\"]]]],\"ghostVersion\":\"4.0\"}","html":"<h3 id=\"tldr\">TLDR:</h3><p>I recently ran into an issue where I lost SSH access to one of my primary environments. I spent 12 hours on my own and 3 with AWS support trying to troubleshoot this problem. In the end I found that the problem was an IP address conflict between Docker and a peered VPC.</p><hr><h3 id=\"situation\">Situation</h3><p>Our AWS usage has drastically increased over the past two years. We have been working on several integration projects for the purposes of automated marketing, business intelligence, and several customer-facing features. Our most recent project is a new customer offering that should be an exciting one to follow. From a technical perspective it’s not all that exceptional and consists of a new page on our ecommerce site, a new API with 3 endpoints, a relatively low-traffic Redis cache, and a new Docker network.</p><p>Before I was ready to deploy any portions of this new offering I wanted to increase the security and maturity of our EC2 instances in terms of SSH and HTTP.</p><h3 id=\"better-security\">Better Security</h3><p>Originally the EC2 instances for various projects were running on a suboptimal security and access design where specific IPs were whitelisted for SSH access and most instances were allowing HTTP on 80 and 443 from any IP. I was unhappy with this strategy as non-static IP addresses tend to change and it’s difficult to stay up to date with the list of whitelisted IPs and which organization related locations they represent. Not to mention the vulnerability of unauthorized SSH connection attempts and HTTP traffic.</p><p>Before I describe my new approach I need to explain our slightly less than common AWS VPC configuration. We function primarily out of two VPCs peered together with differing IP supernets in order to separate core operations from marketing and analytics. VPC A uses the default IP CIDR of <code>172.31.0.0/16</code> while VPC B uses the <code>10.0.0.0/16</code> CIDR supernet. This was done to avoid any potential networking conflicts. VPC A consists entirely of private subnets and is only accessible behind a VPN running within. VPC B has some customer-facing services but is otherwise entirely private. At this point, for various reasons, we only had a VPN configured to access VPC A and not VPC B.</p><p>My new design was to set up a small bastion server in VPC A and to use the VPN from VPC A to SSH into it as an SSH entry point for all environments in VPC B. The bastion would contain the SSH key and IPs of all other environments for the project in question. I would set up a new fleet of security groups to allow for HTTP and SSH traffic over the appropriate ports between the appropriate environments.</p><p>An oversimplified diagram of my new approach to our VPC and EC2 security setup for this project.  THIS WAS SUPPOSED TO BE AN IMAGE BUT I LOST IT</p><p>I was able to execute on this plan and had tested that all connections and services were functioning as expected. Once security was up to standard I was ready to deploy the aforementioned new feature to our development, and subsequently production, environment.</p><h3 id=\"problem\"><strong>Problem</strong></h3><p>The deployment to the development environment went smoothly and I was able to test that things still worked. When I moved on to production and ran <code>docker-compose up</code> I saw that the new services and networks had come up but also that my connection to the server had frozen. I closed the terminal window and attempted to reconnect to the server but the connection refused to work. I’d seen this sort of connection issue before many times and it almost always signified a security group misconfiguration which made a lot of sense to me at the time as I had just finished revamping my security groups.</p><p>ssh hangs when attempting to access the production instance THIS WAS SUPPOSED TO BE AN IMAGE BUT I LOST IT</p><p>After taking a deep look at my security groups and concluding that things were done correctly I made a secondary conclusion that I must be really wrong in my understanding of how security groups work. I was completely baffled as to why I could access the Development environment but could not access the Production environment despite the fact that both machines were running the same OS with the same code and same security groups.</p><p>After a day and a half of troubleshooting this problem on my own I decided to open a ticket with AWS support. Together we tried everything I’d already done as well as some other ideas that the support agent came up with. They raised the idea of temporarily assigning a public IP and a new security group that allows for SSH access from our office IP address. This is basically the same configuration I had before my security group overhaul so I thought it could work and, sure enough, I was able to SSH into the production server via this method.</p><p>The course of action now was to find out what was wrong with the software running in the Production environment and how it was different from the fully functioning Development environment. Both Ubuntu machines had the same <a href=\"https://help.ubuntu.com/community/UFW\">UFW</a> configuration, the same <a href=\"https://wiki.archlinux.org/index.php/iptables\">iptables</a> structure, and were located within the same availability zone and subnet.</p><h3 id=\"a-promising-solution\"><strong>A Promising Solution</strong></h3><p>Since I had success with the temporary workaround public IP and open security group and had likely narrowed the problem down to software running on the instance I decided to take all of my accumulated troubleshooting results and go back to Google the next morning to see what I could find. At this point I was so tired and frustrated that I don’t remember exactly what search terms I used but I came across <a href=\"https://stackoverflow.com/questions/50514275/docker-bridge-conflicts-with-host-network\">a promising StackOverflow</a> post discussing how Docker networks can sometimes conflict with existing subnets. The post described how, by default, docker networks are created in the <code>172.N.0.0/16</code> range of IPs, where N is a somewhat random number that seems to fall between 15 and 35. This prompted me to investigate which subnets the docker networks were being assigned on my problematic VM. I ran <code>docker network list</code> to view a list of networks with their IDs.</p><p>docker network list. network names redacted THIS WAS SUPPOSED TO BE AN IMAGE BUT I LOST IT</p><p>That output a list of the docker networks running on the instance. I then ran <code>docker network inspect &lt;NETWORK ID&gt;</code> on each network ID to view the assigned subnet and mask. The allocated subnets were <code>172.30.0.0/16</code>, <code>172.31.0.0/16</code>, all the way to <code>172.38.0.0/16</code>. If you recall from earlier I mentioned that VPC A, the VPC that the bastion was running in, is assigned the <code>172.31.0.0/16</code> CIDR block. AHAAA!</p><p>This is clearly a conflict! It provides an explanation as to why SSH stopped functioning from the bastion as well as why SSH did function over the public IP. This was such fantastic news and lifted my spirits significantly enough to continue fixing things up, even though I had seriously considered giving up on many occasions over the past two days.</p><p>Why then did my Development environment not run into the same issue when creating that same new docker network? I ran the same docker network inspect command on each of the networks in Development and found that the subnets ranged from <code>172.21.0.0/16</code> to <code>172.29.0.0/16</code>. I couldn’t find clear documentation on how Docker chooses to assign subnets to new networks but as far as I can tell it’s random. Maybe there is something else on the VM using <code>172.0.x.x</code> to <code>172.20.x.x</code> but for my concerns the only reason my Production instance was affected and not my Development instance was pure chance.</p><h3 id=\"back-to-productivity\"><strong>Back to Productivity</strong></h3><p>This was the most frustrating and baffling problem I’ve had to work on recently and there were several moments where I seriously considered starting from scratch. There were also moments where I wondered how I’d ever sleep again or even call myself a developer if I couldn’t figure this out. I felt I had let down myself, my peers, and my company. Upon solving the issue though I realized I learned several valuable lessons in DevOps and gained a much deeper understanding of the AWS network stack as a whole. I'm a better developer because of this experience but I still occasionally hate AWS.</p>","comment_id":"60b2c95c351df9000153b642","plaintext":"TLDR:\nI recently ran into an issue where I lost SSH access to one of my primary\nenvironments. I spent 12 hours on my own and 3 with AWS support trying to\ntroubleshoot this problem. In the end I found that the problem was an IP address\nconflict between Docker and a peered VPC.\n\n\n--------------------------------------------------------------------------------\n\nSituation\nOur AWS usage has drastically increased over the past two years. We have been\nworking on several integration projects for the purposes of automated marketing,\nbusiness intelligence, and several customer-facing features. Our most recent\nproject is a new customer offering that should be an exciting one to follow.\nFrom a technical perspective it’s not all that exceptional and consists of a new\npage on our ecommerce site, a new API with 3 endpoints, a relatively low-traffic\nRedis cache, and a new Docker network.\n\nBefore I was ready to deploy any portions of this new offering I wanted to\nincrease the security and maturity of our EC2 instances in terms of SSH and\nHTTP.\n\nBetter Security\nOriginally the EC2 instances for various projects were running on a suboptimal\nsecurity and access design where specific IPs were whitelisted for SSH access\nand most instances were allowing HTTP on 80 and 443 from any IP. I was unhappy\nwith this strategy as non-static IP addresses tend to change and it’s difficult\nto stay up to date with the list of whitelisted IPs and which organization\nrelated locations they represent. Not to mention the vulnerability of\nunauthorized SSH connection attempts and HTTP traffic.\n\nBefore I describe my new approach I need to explain our slightly less than\ncommon AWS VPC configuration. We function primarily out of two VPCs peered\ntogether with differing IP supernets in order to separate core operations from\nmarketing and analytics. VPC A uses the default IP CIDR of 172.31.0.0/16 while\nVPC B uses the 10.0.0.0/16 CIDR supernet. This was done to avoid any potential\nnetworking conflicts. VPC A consists entirely of private subnets and is only\naccessible behind a VPN running within. VPC B has some customer-facing services\nbut is otherwise entirely private. At this point, for various reasons, we only\nhad a VPN configured to access VPC A and not VPC B.\n\nMy new design was to set up a small bastion server in VPC A and to use the VPN\nfrom VPC A to SSH into it as an SSH entry point for all environments in VPC B.\nThe bastion would contain the SSH key and IPs of all other environments for the\nproject in question. I would set up a new fleet of security groups to allow for\nHTTP and SSH traffic over the appropriate ports between the appropriate\nenvironments.\n\nAn oversimplified diagram of my new approach to our VPC and EC2 security setup\nfor this project.  THIS WAS SUPPOSED TO BE AN IMAGE BUT I LOST IT\n\nI was able to execute on this plan and had tested that all connections and\nservices were functioning as expected. Once security was up to standard I was\nready to deploy the aforementioned new feature to our development, and\nsubsequently production, environment.\n\nProblem\nThe deployment to the development environment went smoothly and I was able to\ntest that things still worked. When I moved on to production and ran \ndocker-compose up I saw that the new services and networks had come up but also\nthat my connection to the server had frozen. I closed the terminal window and\nattempted to reconnect to the server but the connection refused to work. I’d\nseen this sort of connection issue before many times and it almost always\nsignified a security group misconfiguration which made a lot of sense to me at\nthe time as I had just finished revamping my security groups.\n\nssh hangs when attempting to access the production instance THIS WAS SUPPOSED TO\nBE AN IMAGE BUT I LOST IT\n\nAfter taking a deep look at my security groups and concluding that things were\ndone correctly I made a secondary conclusion that I must be really wrong in my\nunderstanding of how security groups work. I was completely baffled as to why I\ncould access the Development environment but could not access the Production\nenvironment despite the fact that both machines were running the same OS with\nthe same code and same security groups.\n\nAfter a day and a half of troubleshooting this problem on my own I decided to\nopen a ticket with AWS support. Together we tried everything I’d already done as\nwell as some other ideas that the support agent came up with. They raised the\nidea of temporarily assigning a public IP and a new security group that allows\nfor SSH access from our office IP address. This is basically the same\nconfiguration I had before my security group overhaul so I thought it could work\nand, sure enough, I was able to SSH into the production server via this method.\n\nThe course of action now was to find out what was wrong with the software\nrunning in the Production environment and how it was different from the fully\nfunctioning Development environment. Both Ubuntu machines had the same UFW\n[https://help.ubuntu.com/community/UFW] configuration, the same iptables\n[https://wiki.archlinux.org/index.php/iptables] structure, and were located\nwithin the same availability zone and subnet.\n\nA Promising Solution\nSince I had success with the temporary workaround public IP and open security\ngroup and had likely narrowed the problem down to software running on the\ninstance I decided to take all of my accumulated troubleshooting results and go\nback to Google the next morning to see what I could find. At this point I was so\ntired and frustrated that I don’t remember exactly what search terms I used but\nI came across a promising StackOverflow\n[https://stackoverflow.com/questions/50514275/docker-bridge-conflicts-with-host-network] \npost discussing how Docker networks can sometimes conflict with existing\nsubnets. The post described how, by default, docker networks are created in the \n172.N.0.0/16 range of IPs, where N is a somewhat random number that seems to\nfall between 15 and 35. This prompted me to investigate which subnets the docker\nnetworks were being assigned on my problematic VM. I ran docker network list to\nview a list of networks with their IDs.\n\ndocker network list. network names redacted THIS WAS SUPPOSED TO BE AN IMAGE BUT\nI LOST IT\n\nThat output a list of the docker networks running on the instance. I then ran \ndocker network inspect <NETWORK ID> on each network ID to view the assigned\nsubnet and mask. The allocated subnets were 172.30.0.0/16, 172.31.0.0/16, all\nthe way to 172.38.0.0/16. If you recall from earlier I mentioned that VPC A, the\nVPC that the bastion was running in, is assigned the 172.31.0.0/16 CIDR block.\nAHAAA!\n\nThis is clearly a conflict! It provides an explanation as to why SSH stopped\nfunctioning from the bastion as well as why SSH did function over the public IP.\nThis was such fantastic news and lifted my spirits significantly enough to\ncontinue fixing things up, even though I had seriously considered giving up on\nmany occasions over the past two days.\n\nWhy then did my Development environment not run into the same issue when\ncreating that same new docker network? I ran the same docker network inspect\ncommand on each of the networks in Development and found that the subnets ranged\nfrom 172.21.0.0/16 to 172.29.0.0/16. I couldn’t find clear documentation on how\nDocker chooses to assign subnets to new networks but as far as I can tell it’s\nrandom. Maybe there is something else on the VM using 172.0.x.x to 172.20.x.x \nbut for my concerns the only reason my Production instance was affected and not\nmy Development instance was pure chance.\n\nBack to Productivity\nThis was the most frustrating and baffling problem I’ve had to work on recently\nand there were several moments where I seriously considered starting from\nscratch. There were also moments where I wondered how I’d ever sleep again or\neven call myself a developer if I couldn’t figure this out. I felt I had let\ndown myself, my peers, and my company. Upon solving the issue though I realized\nI learned several valuable lessons in DevOps and gained a much deeper\nunderstanding of the AWS network stack as a whole. I'm a better developer\nbecause of this experience but I still occasionally hate AWS.","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","author_id":"1","created_at":"2021-05-29 23:08:12","created_by":"1","updated_at":"2021-05-29 23:21:37","updated_by":"1","published_at":"2019-10-26 23:12:00","published_by":"1","custom_excerpt":"I recently ran into an issue where I lost SSH access to one of my primary environments. This issue made me question my career choice but resulted in lessons learned.","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"60b2ca70351df9000153b681","uuid":"e18217dc-0abc-4f68-8240-e3cfd87170b3","title":"Prime Spirals","slug":"prime-spirals","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}],[\"soft-return\",\"\",{}]],\"cards\":[[\"hr\",{}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/2021/06/Prime-Spiral.png\",\"width\":465,\"height\":489,\"cardWidth\":\"\"}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/2021/06/Prime-Spiral-Primes.png\",\"width\":401,\"height\":401}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/2021/06/Spiral-3000.png\",\"width\":1402,\"height\":1402}],[\"image\",{\"src\":\"__GHOST_URL__/content/images/2021/06/Spiral-3000-41.png\",\"width\":1402,\"height\":1376}],[\"code\",{\"code\":\"function isPrime(num) {\\n  if (num < 2) return false;\\n  for (var i = 2; i <= num; i++) {\\n    if (num % i == 0) {\\n      return false;\\n    }\\n  }\\n  return true;\\n};\",\"language\":\"javascript\",\"caption\":\"please excuse my naive 2014 javascript\"}],[\"code\",{\"code\":\"<div id=\\\"spiral\\\" class=\\\"container\\\">\\n  <div class=\\\"item\\\"\\n       ng-repeat=\\\"i in getNumber(upperBound - lowerBound + 1) track by $index\\\"\\n       ng-class=\\\"{prime: isPrime($index + lowerBound)}\\\"\\n       ng-init=\\\"positionDiv($index + 1)\\\">\\n    {{$index + lowerBound}}\\n  </div>\\n</div>\",\"language\":\"html\",\"caption\":\"actual code from 2015\"}],[\"code\",{\"code\":\"function isPrime(num) {\\n  const sqrt = Math.floor(Math.sqrt(num));\\n  for (let i = 2; i < sqrt; i++)\\n    if (num % i === 0) return false;\\n  return num > 1;\\n}\",\"language\":\"javascript\"}],[\"code\",{\"code\":\"0110101000101000101000100000101000001000101000100\"}],[\"code\",{\"code\":\"<canvas id=\\\"canvas\\\"></canvas>\",\"language\":\"html\"}],[\"code\",{\"language\":\"javascript\",\"code\":\"let i = 0;\\nlet increment = 1; // used to decide squares in one direction\\nmaxSquares:\\nwhile(true) {\\n  // Change direction every two loops of j\\n  for(j = 0; j < 2; j++) {            \\n    // increases by one every two loops of j\\n    for(k = 0; k < increment; k++) {  \\n      let translate = ... // complex translation calculation\\n      context.save();     // save canvas context\\n      context.translate(translate.x, translate.y);\\n      if(isPrime(i)) context.fillRect(...) // actual draw\\n      if(++i > maxNumber) break maxNumber;\\n    }\\n  }\\n  increment++;\\n}\",\"caption\":\"\"}],[\"code\",{\"language\":\"javascript\",\"code\":\"let stretchIndex = 0;     // each 'stretch' is squares in one direction\\nlet stretchLength = 1;    // every 2 direction changes it increases 1\\nlet stretchTraversed = 0; \\n\\n\\nfor (let i = 0, j = start; j < end; i++, j++) {\\n  if (isPrime(j)) ctx.fillRect(...); // actual draw\\n  const [xDirection, yDirection] = ...// change according to index\\n  currentX += xDirection * itemSize;\\n  currentY += yDirection * itemSize;\\n\\n  stretchTraversed++;\\n  if (stretchTraversed >= stretchLength) {\\n    stretchIndex++;\\n    stretchTraversed = 0;\\n    if (stretchIndex % 2 === 0) ++stretchLength;\\n  }\\n}\"}],[\"bookmark\",{\"url\":\"https://www.wired.com/story/a-big-question-about-prime-numbers-gets-a-partial-answer/\",\"metadata\":{\"url\":\"https://www.quantamagazine.org/big-question-about-primes-proved-in-small-number-systems-20190926/\",\"title\":\"A Big Question About Prime Numbers Gets a Partial Answer\",\"description\":\"The twin primes conjecture has bedeviled mathematicians for more than a century. Now there’s a solution for one version of it.\",\"author\":\"Kevin Hartnett\",\"publisher\":\"WIRED\",\"thumbnail\":\"https://media.wired.com/photos/5d8e7b4598daea00099eab79/191:100/w_1280,c_limit/Science_Quanta_TwinPrimes_2880x1620_Lede.jpg\",\"icon\":\"https://www.wired.com/verso/static/wired/assets/favicon.ico\"}}]],\"markups\":[[\"strong\"],[\"a\",[\"href\",\"https://spiral.dorsay.dev/\"]],[\"a\",[\"href\",\"https://www.youtube.com/watch?v=iFuR97YcSLM\"]],[\"a\",[\"href\",\"https://www.youtube.com/channel/UCoxcjq-8xIDTYp3uz647V5A\"]],[\"a\",[\"href\",\"https://en.wikipedia.org/wiki/Munchers#Number_Munchers\"]],[\"a\",[\"href\",\"https://classicreload.com/number-munchers.html\"]],[\"a\",[\"href\",\"https://www.qsleap.com/gmat/resources/math-basics-prime-numbers\"]],[\"sup\"],[\"code\"],[\"a\",[\"href\",\"https://github.com/Brymastr/spiral/tree/9ae9344be8cb58603ee18cac6cba688ab08fd5cb\"]],[\"a\",[\"href\",\"https://primes.utm.edu/lists/small/millions/\"]],[\"a\",[\"href\",\"https://primes.dorsay.dev/\"]],[\"a\",[\"href\",\"https://spiral.dorsay.dev/primes.dat.gz\"]],[\"a\",[\"href\",\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API\"]],[\"a\",[\"href\",\"https://dorsay.dev/posts/this-blog\"]],[\"a\",[\"href\",\"https://wealthforynab.com\"]],[\"a\",[\"href\",\"https://svelte.dev/\"]],[\"a\",[\"href\",\"https://vitejs.dev/\"]],[\"a\",[\"href\",\"https://github.com/Brymastr/spiral/blob/f6ba96249ef0dd2a0c86a133adfc16dabbfd900c/spiral.js#L52\"]],[\"a\",[\"href\",\"https://github.com/Brymastr/spiral/blob/55f21ee787ff1f9e5374a147d2db554bc0021aed/src/lib/Canvas.svelte#L56\"]],[\"a\",[\"href\",\"https://github.com/Brymastr/spiral\"]]],\"sections\":[[1,\"h3\",[[0,[0],1,\"TLDR:\"]]],[1,\"p\",[[0,[],0,\"Prime Spirals are an interesting topic to me and I wanted to play around with them in website format. I was dissatisfied with the existing offerings so I decided to make my own... 4 times in 7 years. \"],[0,[1],1,\"Try it out here\"],[0,[],0,\".\"]]],[10,0],[1,\"p\",[[0,[],0,\"A few years ago I stumbled across \"],[0,[2],1,\"a video\"],[0,[],0,\" on the YouTube channel \\\"\"],[0,[3],1,\"Numberphile\"],[0,[],0,\"\\\" talking about Prime Spirals. I found it fascinating that this phenomenon can exist and it blew my mind that I had only just discovered it. I wanted to play around with this in website or app format but the only pages I could find weren't exactly what I was looking for. This seemed like an interesting idea so I decided to make my own.\"]]],[1,\"p\",[[0,[],0,\"In primary school my friends and I played a computer game called \"],[0,[4],1,\"Number Munchers\"],[0,[],0,\". You play as a little green character on a 5x6 grid of numbers with the goal of eating all of the numbers that match the selected category. My favourite category to play was prime numbers and I think the game was the only time I learned about primes in school. I managed to get quite good at identifying primes over the years of playing the game and I'm certain it's partly responsible for my interest in this topic. If you're unfamiliar with the game you can play it \"],[0,[5],1,\"here\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"Before I go into detail about my multiple attempts at building a web-based prime spiral I should briefly explain prime numbers and what a prime spiral is.\"]]],[1,\"h3\",[[0,[0],1,\"Prime Numbers\"]]],[1,\"p\",[[0,[],0,\"A prime number is one that has no factors except for 1 and itself. For example 7 is a prime number because it has not other factors whereas the number 21 is not prime because it has factor pairs 21,1 and 7,3. Numbers which are not prime are called Composite numbers and eating those in Number Munchers will lose you a life.\"]]],[1,\"p\",[[0,[],0,\"Prime numbers are not possible to predict but there are \"],[0,[6],1,\"some rules\"],[0,[],0,\" around deciding if a number is prime or composite:\"]]],[3,\"ol\",[[[0,[],0,\"An even number can always be divided by 2 so all primes other than 2 must be odd numbers\"]],[[0,[],0,\"Any number ending in a 5 is divisible by 5 which makes it composite\"]],[[0,[],0,\"A number in which the sum of its digits is divisible by 3 will also be divisible by 3 and therefore composite. Example:\"],[1,[],0,0],[0,[],0,\"- \"],[0,[0],1,\"21:\"],[0,[],0,\"  2 + 1 = 3 % 3 = 0. composite\"],[1,[],0,1],[0,[],0,\"- \"],[0,[0],1,\"2874: \"],[0,[],0,\"2 + 8 + 7 + 4 = 21 % 3 = 0. composite\"],[1,[],0,2],[0,[],0,\"- \"],[0,[0],1,\"199:\"],[0,[],0,\" 1 + 9 + 9 = 19 % 3 = 1. prime\"]],[[0,[],0,\"Double the last digit and subtract it from the rest of the number and if the result is divisible by 7 then the original number is also divisible by 7 and therefore composite. Example:\"],[1,[],0,3],[0,[],0,\"- \"],[0,[0],1,\"9233:\"],[0,[],0,\" 923 - (3 * 2) = 917 % 7 = 0. composite\"]]]],[1,\"p\",[[0,[],0,\"These rules are pulled from here: \"],[0,[6],1,\"https://www.qsleap.com/gmat/resources/math-basics-prime-numbers\"]]],[1,\"p\",[[0,[],0,\"These rules and others have helped increase the rate of prime discovery over time. When I first became interested in the topic the largest discovered prime was 2\"],[0,[7],1,\"57,885,161\"],[0,[],0,\" - 1 and at the time of writing this post the largest was 2\"],[0,[7],1,\"82,589,933\"],[0,[],0,\" - 1.\"]]],[1,\"h3\",[[0,[0],1,\"Prime Spirals\"]]],[1,\"p\",[[0,[],0,\"I'll keep this spiral explanation brief as the linked video and other documentation describes it nicely already. The first prime spiral was discovered/invented by a Polish scientist named Stanislaw Ulam in 1963. He was doodling numbers on a piece of paper in creative patterns and landed on one with interesting properties.\"]]],[1,\"p\",[[0,[],0,\"A prime spiral works like this: The number 1 is written as a starting point, then the number 2 is written just to the right of 1. 3 above 2, 4 left of 3, again 5 left of 4, then 6 below 5 and left of 1... maybe this is best described in an image.\"]]],[10,1],[1,\"p\",[[0,[],0,\"This is simply the first 9 numbers but the rest continue in the same manner. The next step is to highlight all of the prime numbers like so:\"]]],[10,2],[1,\"p\",[[0,[],0,\"The interesting part is that as you scale this up a pattern of diagonal lines starts to appear. The pattern is subtle and appears random which makes sense because prime numbers are for the most part unpredictable.\"]]],[10,3],[1,\"p\",[[0,[],0,\"What's even stranger is that if you start the spiral at 41 instead of 1 and count outward in the same pattern you get a much longer diagonal line spanning from the middle. The reason this fascinates me is simply that a number system that is theoretically unpredictable arranged in a specific way can produce a somewhat predictable image.\"]]],[10,4],[1,\"h3\",[[0,[0],1,\"Building a web spiral\"]]],[1,\"p\",[[0,[],0,\"I first decided to work on a web version of a prime spiral back in 2014 when I was a student. Back then I didn't know how git worked and I no longer have the code lying around but I'm sure if I did it would be a cringey look into my coding style as a university student.\"]]],[1,\"h3\",[[0,[0],1,\"v1 - jQuery\"]]],[1,\"p\",[[0,[],0,\"As with most of my fun side projects, Version 1 of my prime spiral was an excuse to learn a new technology. At the time I was just getting into web development and the technology I wanted to learn was jQuery. jQuery gets looked down on a lot for being a completely overkill choice when the only function that gets used is the selector and this project was no exception. To make things worse I was calculating factors for each number. My initial commit of V2 used the same prime calculation algorithm as V1.\"]]],[10,5],[1,\"p\",[[0,[],0,\"When trying to calculate if the number 21 is prime I needed to check if each number between 2 and 21 is a factor. The time complexity of this calculation is O(n) where n is 21 but I needed to calculate prime-ness for each number up to 21. This made my algorithm's time complexity O(n\"],[0,[7],1,\"2\"],[0,[],0,\"). In order to calculate primes up to 21 it took 441 calculations minus a few since I started at 2. Calculating primes up to 10,000 would have required 100 million calculations.\"]]],[1,\"h3\",[[0,[0],1,\"v2 - Angular\"]]],[1,\"p\",[[0,[],0,\"The next semester of school was during the explosion of new Javascript frameworks, or at least when I became privy to it, so naturally the next technology I wanted to learn was Angular. With Angular I was able to take advantage of the \"],[0,[8],1,\"ng-repeat\"],[0,[],0,\" directive to easily produce N simple square divs. For every number in the loop I calculated if it was a prime and set the background color if it was. Also before every iteration I calculated which direction the next square would be placed in.\"]]],[10,6],[1,\"p\",[[0,[],0,\"As with the jQuery version, this site was not very performant; Even with a few improvements to the algorithm. I was now only calculating factors up to a square root of  the current number which reduced the time complexity to O(sqrt(n)). The bottleneck of this new version was that I was generating more HTML DOM elements than the browser and my Core 2 duo 2011 MacBook Pro could handle. The actual code is available at \"],[0,[9],1,\"this 2015 commit\"],[0,[],0,\" but looks something like this:\"]]],[10,7],[1,\"h3\",[[0,[0],1,\"v3 - Vue 2\"]]],[1,\"p\",[[0,[],0,\"Fast forward to mid 2019 and I'd come a long way in my career and knowledge and so had browser technology. With this version I looked at the shortcomings of the previous two and came up with a plan to improve upon them.\"]]],[1,\"p\",[[0,[],0,\"The first obvious area for improvement was the calculation of prime numbers. I decided to get around even needing to calculate primes at all by downloading a list of the \"],[0,[10],1,\"first 2 million\"],[0,[],0,\" primes. I then converted that list of primes into a simple text file where \"],[0,[8],1,\"0\"],[0,[],0,\" represents composite and \"],[0,[8],1,\"1\"],[0,[],0,\" represents prime and each bit represents an integer from 1 to 32,452,843. For example, the first 50 bits look like this:\"]]],[10,8],[1,\"p\",[[0,[],0,\"This ~30.1MB file (1.6MB gzipped) is hosted on a simple express API at \"],[0,[11],1,\"https://primes.dorsay.dev\"],[0,[],0,\" so that it can be streamed to the vue app (or random internet stranger) upon request. (\"],[0,[0],1,\"Update 2021:\"],[0,[],0,\" this api is no longer available and instead the file is hosted in S3 and available at \"],[0,[12],1,\"https://spiral.dorsay.dev/primes.dat.gz\"],[0,[],0,\"). The API adds the \"],[0,[8],1,\"Cache-Control\"],[0,[],0,\" header with a large max-age so your browser will fetch the primes from local cache until you clear it or you use Firefox Focus. On a decent internet connection, without caching, in the pacific northwest this only takes ~570ms to download which is a massive improvement over calculating each prime on the client.\"]]],[1,\"p\",[[0,[],0,\"The next major area for improvement was decreasing the sheer number of DOM elements that get rendered. I opted for using the \"],[0,[13],1,\"HTML5 Canvas API\"],[0,[],0,\". This was my first time using it but it was quite straightforward. The algorithm to calculate where to place the next square remained unchanged but now instead of rendering a div I'm making a call to \"],[0,[8],1,\"fillRect\"],[0,[],0,\" for each square. The result is a single rendered element.\"]]],[10,9],[1,\"p\",[[0,[],0,\"As the first two versions were quite basic and the max number could not be changed I wanted this version to have a control panel that could control the zoom, starting number, ending number, and the colour of the squares. I also wanted these control parameters to be saved for future sessions. I opted to use my current favourite frontend JavaScript framework, Vue.js. I've been using it for a while now and the quality of life improvements I get from using the \"],[0,[8],1,\"vue-cli\"],[0,[],0,\" to generate new projects and my familiarity with the framework justify the likely increase in initial page load time.\"]]],[1,\"h3\",[[0,[],0,\"v4 - Svelte (update: June 2021)\"]]],[1,\"p\",[[0,[],0,\"In May of 2021 when I was in the process of migrating all of my hosted sites to AWS (\"],[0,[14],1,\"How I built this blog\"],[0,[],0,\") I decided to upgrade this site from Vue 2. I was poking around in the code trying to change over from hosting via a custom Dockerfile that I had written to a new CloudFormation template for hosting with S3 and CloudFront. I had used Vue before this site but looking back now I knew a lot less than I thought I did and the code was not very clean. I've done several other Vue sites since then and recently built \"],[0,[15],1,\"wealthforynab.com\"],[0,[],0,\" in Vue 3. I wanted to upgrade this small site to either Vue 3 or to \"],[0,[16],1,\"Svelte\"],[0,[],0,\" since I had heard good things about the up-and-coming \\\"cybernetically enhanced\\\" framework.\"]]],[1,\"p\",[[0,[],0,\"This time around I feel like my frontend skills have much improved and I was able to write a very minimal and tidy web app in a single day. The most notable changes other than the framework are:\"]]],[3,\"ul\",[[[0,[],0,\"Removed Express API that exposes the primes data\"]],[[0,[],0,\"Migrated from Docker to AWS S3 and CloudFront\"]],[[0,[],0,\"Moved primes data file to S3 also so that it could be cached with CloudFront\"]],[[0,[],0,\"Written in Typescript\"]],[[0,[],0,\"Used \"],[0,[17],1,\"Vite\"],[0,[],0,\" instead of vue-cli\"]],[[0,[],0,\"Updated drawing algorithm\"]]]],[1,\"p\",[[0,[],0,\"The previous algorithm for handling drawing logic worked by calculating x/y translations of the canvas context, drawing a square, and then saving the context. It was also quite convoluted in that it used 3 loops to figure out positioning. The new algorithm doesn't bother with context translation or saving of context state and simply keeps track of the current drawing offset on every iteration of its single loop.\"]]],[1,\"p\",[[0,[],0,\"The algorithm went from this: (simplified for easier display)\"]]],[10,10],[1,\"p\",[[0,[],0,\"To this: (also simplified)\"]]],[10,11],[1,\"p\",[[0,[18],1,\"Actual v3 draw function.\"],[1,[],0,4],[0,[19],1,\"Actual v4 draw function.\"]]],[1,\"p\",[[0,[],0,\"The new codebase is actually longer in total but the bundled result is significantly smaller thanks to Svelte. The app is faster to load and render now which may be due to the change to Svelte but it may also just be that computers are faster these days. Other than these differences the site is visually and functionally the same as the previous version. This was just an excuse for me to try out a new framework. If you'd like to mess around with v4 you can try it out at \"],[0,[1],1,\"https://spiral.dorsay.dev\"],[0,[],0,\". The code for this project is available at \"],[0,[20],1,\"my Github account\"],[0,[],0,\".\"]]],[1,\"h3\",[[0,[0],1,\"Conclusion\"]]],[1,\"p\",[[0,[],0,\"There are many more ways to improve upon my naive methods of calculating prime numbers. There's a reason that there are challenges with monetary rewards to calculate the next prime number beyond what is currently possible. When it comes to theories and conjectures and whatnots I don't really know what I'm talking about and that's not the point of this post. I just wanted to show off my fun little project. People much smarter than me can explain this much better and will probably make further steps to solving the prime pattern in the near future. I find this to be a fascinating phenomenon that will hopefully one day become a formula.\"]]],[1,\"p\",[[0,[],0,\"This is the article that inspired me to publish my spiral site and this post:\"]]],[10,12],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","html":"<h3 id=\"tldr\"><strong>TLDR:</strong></h3><p>Prime Spirals are an interesting topic to me and I wanted to play around with them in website format. I was dissatisfied with the existing offerings so I decided to make my own... 4 times in 7 years. <a href=\"https://spiral.dorsay.dev/\">Try it out here</a>.</p><hr><p>A few years ago I stumbled across <a href=\"https://www.youtube.com/watch?v=iFuR97YcSLM\">a video</a> on the YouTube channel \"<a href=\"https://www.youtube.com/channel/UCoxcjq-8xIDTYp3uz647V5A\">Numberphile</a>\" talking about Prime Spirals. I found it fascinating that this phenomenon can exist and it blew my mind that I had only just discovered it. I wanted to play around with this in website or app format but the only pages I could find weren't exactly what I was looking for. This seemed like an interesting idea so I decided to make my own.</p><p>In primary school my friends and I played a computer game called <a href=\"https://en.wikipedia.org/wiki/Munchers#Number_Munchers\">Number Munchers</a>. You play as a little green character on a 5x6 grid of numbers with the goal of eating all of the numbers that match the selected category. My favourite category to play was prime numbers and I think the game was the only time I learned about primes in school. I managed to get quite good at identifying primes over the years of playing the game and I'm certain it's partly responsible for my interest in this topic. If you're unfamiliar with the game you can play it <a href=\"https://classicreload.com/number-munchers.html\">here</a>.</p><p>Before I go into detail about my multiple attempts at building a web-based prime spiral I should briefly explain prime numbers and what a prime spiral is.</p><h3 id=\"prime-numbers\"><strong>Prime Numbers</strong></h3><p>A prime number is one that has no factors except for 1 and itself. For example 7 is a prime number because it has not other factors whereas the number 21 is not prime because it has factor pairs 21,1 and 7,3. Numbers which are not prime are called Composite numbers and eating those in Number Munchers will lose you a life.</p><p>Prime numbers are not possible to predict but there are <a href=\"https://www.qsleap.com/gmat/resources/math-basics-prime-numbers\">some rules</a> around deciding if a number is prime or composite:</p><ol><li>An even number can always be divided by 2 so all primes other than 2 must be odd numbers</li><li>Any number ending in a 5 is divisible by 5 which makes it composite</li><li>A number in which the sum of its digits is divisible by 3 will also be divisible by 3 and therefore composite. Example:<br>- <strong>21:</strong>  2 + 1 = 3 % 3 = 0. composite<br>- <strong>2874: </strong>2 + 8 + 7 + 4 = 21 % 3 = 0. composite<br>- <strong>199:</strong> 1 + 9 + 9 = 19 % 3 = 1. prime</li><li>Double the last digit and subtract it from the rest of the number and if the result is divisible by 7 then the original number is also divisible by 7 and therefore composite. Example:<br>- <strong>9233:</strong> 923 - (3 * 2) = 917 % 7 = 0. composite</li></ol><p>These rules are pulled from here: <a href=\"https://www.qsleap.com/gmat/resources/math-basics-prime-numbers\">https://www.qsleap.com/gmat/resources/math-basics-prime-numbers</a></p><p>These rules and others have helped increase the rate of prime discovery over time. When I first became interested in the topic the largest discovered prime was 2<sup>57,885,161</sup> - 1 and at the time of writing this post the largest was 2<sup>82,589,933</sup> - 1.</p><h3 id=\"prime-spirals\"><strong>Prime Spirals</strong></h3><p>I'll keep this spiral explanation brief as the linked video and other documentation describes it nicely already. The first prime spiral was discovered/invented by a Polish scientist named Stanislaw Ulam in 1963. He was doodling numbers on a piece of paper in creative patterns and landed on one with interesting properties.</p><p>A prime spiral works like this: The number 1 is written as a starting point, then the number 2 is written just to the right of 1. 3 above 2, 4 left of 3, again 5 left of 4, then 6 below 5 and left of 1... maybe this is best described in an image.</p><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2021/06/Prime-Spiral.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"465\" height=\"489\"></figure><p>This is simply the first 9 numbers but the rest continue in the same manner. The next step is to highlight all of the prime numbers like so:</p><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2021/06/Prime-Spiral-Primes.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"401\" height=\"401\"></figure><p>The interesting part is that as you scale this up a pattern of diagonal lines starts to appear. The pattern is subtle and appears random which makes sense because prime numbers are for the most part unpredictable.</p><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2021/06/Spiral-3000.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1402\" height=\"1402\" srcset=\"__GHOST_URL__/content/images/size/w600/2021/06/Spiral-3000.png 600w, __GHOST_URL__/content/images/size/w1000/2021/06/Spiral-3000.png 1000w, __GHOST_URL__/content/images/2021/06/Spiral-3000.png 1402w\" sizes=\"(min-width: 720px) 720px\"></figure><p>What's even stranger is that if you start the spiral at 41 instead of 1 and count outward in the same pattern you get a much longer diagonal line spanning from the middle. The reason this fascinates me is simply that a number system that is theoretically unpredictable arranged in a specific way can produce a somewhat predictable image.</p><figure class=\"kg-card kg-image-card\"><img src=\"__GHOST_URL__/content/images/2021/06/Spiral-3000-41.png\" class=\"kg-image\" alt loading=\"lazy\" width=\"1402\" height=\"1376\" srcset=\"__GHOST_URL__/content/images/size/w600/2021/06/Spiral-3000-41.png 600w, __GHOST_URL__/content/images/size/w1000/2021/06/Spiral-3000-41.png 1000w, __GHOST_URL__/content/images/2021/06/Spiral-3000-41.png 1402w\" sizes=\"(min-width: 720px) 720px\"></figure><h3 id=\"building-a-web-spiral\"><strong>Building a web spiral</strong></h3><p>I first decided to work on a web version of a prime spiral back in 2014 when I was a student. Back then I didn't know how git worked and I no longer have the code lying around but I'm sure if I did it would be a cringey look into my coding style as a university student.</p><h3 id=\"v1jquery\"><strong>v1 - jQuery</strong></h3><p>As with most of my fun side projects, Version 1 of my prime spiral was an excuse to learn a new technology. At the time I was just getting into web development and the technology I wanted to learn was jQuery. jQuery gets looked down on a lot for being a completely overkill choice when the only function that gets used is the selector and this project was no exception. To make things worse I was calculating factors for each number. My initial commit of V2 used the same prime calculation algorithm as V1.</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-javascript\">function isPrime(num) {\n  if (num &lt; 2) return false;\n  for (var i = 2; i &lt;= num; i++) {\n    if (num % i == 0) {\n      return false;\n    }\n  }\n  return true;\n};</code></pre><figcaption>please excuse my naive 2014 javascript</figcaption></figure><p>When trying to calculate if the number 21 is prime I needed to check if each number between 2 and 21 is a factor. The time complexity of this calculation is O(n) where n is 21 but I needed to calculate prime-ness for each number up to 21. This made my algorithm's time complexity O(n<sup>2</sup>). In order to calculate primes up to 21 it took 441 calculations minus a few since I started at 2. Calculating primes up to 10,000 would have required 100 million calculations.</p><h3 id=\"v2angular\"><strong>v2 - Angular</strong></h3><p>The next semester of school was during the explosion of new Javascript frameworks, or at least when I became privy to it, so naturally the next technology I wanted to learn was Angular. With Angular I was able to take advantage of the <code>ng-repeat</code> directive to easily produce N simple square divs. For every number in the loop I calculated if it was a prime and set the background color if it was. Also before every iteration I calculated which direction the next square would be placed in.</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-html\">&lt;div id=\"spiral\" class=\"container\"&gt;\n  &lt;div class=\"item\"\n       ng-repeat=\"i in getNumber(upperBound - lowerBound + 1) track by $index\"\n       ng-class=\"{prime: isPrime($index + lowerBound)}\"\n       ng-init=\"positionDiv($index + 1)\"&gt;\n    {{$index + lowerBound}}\n  &lt;/div&gt;\n&lt;/div&gt;</code></pre><figcaption>actual code from 2015</figcaption></figure><p>As with the jQuery version, this site was not very performant; Even with a few improvements to the algorithm. I was now only calculating factors up to a square root of  the current number which reduced the time complexity to O(sqrt(n)). The bottleneck of this new version was that I was generating more HTML DOM elements than the browser and my Core 2 duo 2011 MacBook Pro could handle. The actual code is available at <a href=\"https://github.com/Brymastr/spiral/tree/9ae9344be8cb58603ee18cac6cba688ab08fd5cb\">this 2015 commit</a> but looks something like this:</p><pre><code class=\"language-javascript\">function isPrime(num) {\n  const sqrt = Math.floor(Math.sqrt(num));\n  for (let i = 2; i &lt; sqrt; i++)\n    if (num % i === 0) return false;\n  return num &gt; 1;\n}</code></pre><h3 id=\"v3vue-2\"><strong>v3 - Vue 2</strong></h3><p>Fast forward to mid 2019 and I'd come a long way in my career and knowledge and so had browser technology. With this version I looked at the shortcomings of the previous two and came up with a plan to improve upon them.</p><p>The first obvious area for improvement was the calculation of prime numbers. I decided to get around even needing to calculate primes at all by downloading a list of the <a href=\"https://primes.utm.edu/lists/small/millions/\">first 2 million</a> primes. I then converted that list of primes into a simple text file where <code>0</code> represents composite and <code>1</code> represents prime and each bit represents an integer from 1 to 32,452,843. For example, the first 50 bits look like this:</p><pre><code>0110101000101000101000100000101000001000101000100</code></pre><p>This ~30.1MB file (1.6MB gzipped) is hosted on a simple express API at <a href=\"https://primes.dorsay.dev/\">https://primes.dorsay.dev</a> so that it can be streamed to the vue app (or random internet stranger) upon request. (<strong>Update 2021:</strong> this api is no longer available and instead the file is hosted in S3 and available at <a href=\"https://spiral.dorsay.dev/primes.dat.gz\">https://spiral.dorsay.dev/primes.dat.gz</a>). The API adds the <code>Cache-Control</code> header with a large max-age so your browser will fetch the primes from local cache until you clear it or you use Firefox Focus. On a decent internet connection, without caching, in the pacific northwest this only takes ~570ms to download which is a massive improvement over calculating each prime on the client.</p><p>The next major area for improvement was decreasing the sheer number of DOM elements that get rendered. I opted for using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API\">HTML5 Canvas API</a>. This was my first time using it but it was quite straightforward. The algorithm to calculate where to place the next square remained unchanged but now instead of rendering a div I'm making a call to <code>fillRect</code> for each square. The result is a single rendered element.</p><pre><code class=\"language-html\">&lt;canvas id=\"canvas\"&gt;&lt;/canvas&gt;</code></pre><p>As the first two versions were quite basic and the max number could not be changed I wanted this version to have a control panel that could control the zoom, starting number, ending number, and the colour of the squares. I also wanted these control parameters to be saved for future sessions. I opted to use my current favourite frontend JavaScript framework, Vue.js. I've been using it for a while now and the quality of life improvements I get from using the <code>vue-cli</code> to generate new projects and my familiarity with the framework justify the likely increase in initial page load time.</p><h3 id=\"v4svelte-update-june-2021\">v4 - Svelte (update: June 2021)</h3><p>In May of 2021 when I was in the process of migrating all of my hosted sites to AWS (<a href=\"https://dorsay.dev/posts/this-blog\">How I built this blog</a>) I decided to upgrade this site from Vue 2. I was poking around in the code trying to change over from hosting via a custom Dockerfile that I had written to a new CloudFormation template for hosting with S3 and CloudFront. I had used Vue before this site but looking back now I knew a lot less than I thought I did and the code was not very clean. I've done several other Vue sites since then and recently built <a href=\"https://wealthforynab.com\">wealthforynab.com</a> in Vue 3. I wanted to upgrade this small site to either Vue 3 or to <a href=\"https://svelte.dev/\">Svelte</a> since I had heard good things about the up-and-coming \"cybernetically enhanced\" framework.</p><p>This time around I feel like my frontend skills have much improved and I was able to write a very minimal and tidy web app in a single day. The most notable changes other than the framework are:</p><ul><li>Removed Express API that exposes the primes data</li><li>Migrated from Docker to AWS S3 and CloudFront</li><li>Moved primes data file to S3 also so that it could be cached with CloudFront</li><li>Written in Typescript</li><li>Used <a href=\"https://vitejs.dev/\">Vite</a> instead of vue-cli</li><li>Updated drawing algorithm</li></ul><p>The previous algorithm for handling drawing logic worked by calculating x/y translations of the canvas context, drawing a square, and then saving the context. It was also quite convoluted in that it used 3 loops to figure out positioning. The new algorithm doesn't bother with context translation or saving of context state and simply keeps track of the current drawing offset on every iteration of its single loop.</p><p>The algorithm went from this: (simplified for easier display)</p><pre><code class=\"language-javascript\">let i = 0;\nlet increment = 1; // used to decide squares in one direction\nmaxSquares:\nwhile(true) {\n  // Change direction every two loops of j\n  for(j = 0; j &lt; 2; j++) {            \n    // increases by one every two loops of j\n    for(k = 0; k &lt; increment; k++) {  \n      let translate = ... // complex translation calculation\n      context.save();     // save canvas context\n      context.translate(translate.x, translate.y);\n      if(isPrime(i)) context.fillRect(...) // actual draw\n      if(++i &gt; maxNumber) break maxNumber;\n    }\n  }\n  increment++;\n}</code></pre><p>To this: (also simplified)</p><pre><code class=\"language-javascript\">let stretchIndex = 0;     // each 'stretch' is squares in one direction\nlet stretchLength = 1;    // every 2 direction changes it increases 1\nlet stretchTraversed = 0; \n\n\nfor (let i = 0, j = start; j &lt; end; i++, j++) {\n  if (isPrime(j)) ctx.fillRect(...); // actual draw\n  const [xDirection, yDirection] = ...// change according to index\n  currentX += xDirection * itemSize;\n  currentY += yDirection * itemSize;\n\n  stretchTraversed++;\n  if (stretchTraversed &gt;= stretchLength) {\n    stretchIndex++;\n    stretchTraversed = 0;\n    if (stretchIndex % 2 === 0) ++stretchLength;\n  }\n}</code></pre><p><a href=\"https://github.com/Brymastr/spiral/blob/f6ba96249ef0dd2a0c86a133adfc16dabbfd900c/spiral.js#L52\">Actual v3 draw function.</a><br><a href=\"https://github.com/Brymastr/spiral/blob/55f21ee787ff1f9e5374a147d2db554bc0021aed/src/lib/Canvas.svelte#L56\">Actual v4 draw function.</a></p><p>The new codebase is actually longer in total but the bundled result is significantly smaller thanks to Svelte. The app is faster to load and render now which may be due to the change to Svelte but it may also just be that computers are faster these days. Other than these differences the site is visually and functionally the same as the previous version. This was just an excuse for me to try out a new framework. If you'd like to mess around with v4 you can try it out at <a href=\"https://spiral.dorsay.dev/\">https://spiral.dorsay.dev</a>. The code for this project is available at <a href=\"https://github.com/Brymastr/spiral\">my Github account</a>.</p><h3 id=\"conclusion\"><strong>Conclusion</strong></h3><p>There are many more ways to improve upon my naive methods of calculating prime numbers. There's a reason that there are challenges with monetary rewards to calculate the next prime number beyond what is currently possible. When it comes to theories and conjectures and whatnots I don't really know what I'm talking about and that's not the point of this post. I just wanted to show off my fun little project. People much smarter than me can explain this much better and will probably make further steps to solving the prime pattern in the near future. I find this to be a fascinating phenomenon that will hopefully one day become a formula.</p><p>This is the article that inspired me to publish my spiral site and this post:</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://www.wired.com/story/a-big-question-about-prime-numbers-gets-a-partial-answer/\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">A Big Question About Prime Numbers Gets a Partial Answer</div><div class=\"kg-bookmark-description\">The twin primes conjecture has bedeviled mathematicians for more than a century. Now there’s a solution for one version of it.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://www.wired.com/verso/static/wired/assets/favicon.ico\"><span class=\"kg-bookmark-author\">WIRED</span><span class=\"kg-bookmark-publisher\">Kevin Hartnett</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://media.wired.com/photos/5d8e7b4598daea00099eab79/191:100/w_1280,c_limit/Science_Quanta_TwinPrimes_2880x1620_Lede.jpg\"></div></a></figure>","comment_id":"60b2ca70351df9000153b681","plaintext":"TLDR:\nPrime Spirals are an interesting topic to me and I wanted to play around with\nthem in website format. I was dissatisfied with the existing offerings so I\ndecided to make my own... 4 times in 7 years. Try it out here\n[https://spiral.dorsay.dev/].\n\n\n--------------------------------------------------------------------------------\n\nA few years ago I stumbled across a video\n[https://www.youtube.com/watch?v=iFuR97YcSLM] on the YouTube channel \"\nNumberphile [https://www.youtube.com/channel/UCoxcjq-8xIDTYp3uz647V5A]\" talking\nabout Prime Spirals. I found it fascinating that this phenomenon can exist and\nit blew my mind that I had only just discovered it. I wanted to play around with\nthis in website or app format but the only pages I could find weren't exactly\nwhat I was looking for. This seemed like an interesting idea so I decided to\nmake my own.\n\nIn primary school my friends and I played a computer game called Number Munchers\n[https://en.wikipedia.org/wiki/Munchers#Number_Munchers]. You play as a little\ngreen character on a 5x6 grid of numbers with the goal of eating all of the\nnumbers that match the selected category. My favourite category to play was\nprime numbers and I think the game was the only time I learned about primes in\nschool. I managed to get quite good at identifying primes over the years of\nplaying the game and I'm certain it's partly responsible for my interest in this\ntopic. If you're unfamiliar with the game you can play it here\n[https://classicreload.com/number-munchers.html].\n\nBefore I go into detail about my multiple attempts at building a web-based prime\nspiral I should briefly explain prime numbers and what a prime spiral is.\n\nPrime Numbers\nA prime number is one that has no factors except for 1 and itself. For example 7\nis a prime number because it has not other factors whereas the number 21 is not\nprime because it has factor pairs 21,1 and 7,3. Numbers which are not prime are\ncalled Composite numbers and eating those in Number Munchers will lose you a\nlife.\n\nPrime numbers are not possible to predict but there are some rules\n[https://www.qsleap.com/gmat/resources/math-basics-prime-numbers] around\ndeciding if a number is prime or composite:\n\n 1. An even number can always be divided by 2 so all primes other than 2 must be\n    odd numbers\n 2. Any number ending in a 5 is divisible by 5 which makes it composite\n 3. A number in which the sum of its digits is divisible by 3 will also be\n    divisible by 3 and therefore composite. Example:\n    - 21: 2 + 1 = 3 % 3 = 0. composite\n    - 2874: 2 + 8 + 7 + 4 = 21 % 3 = 0. composite\n    - 199: 1 + 9 + 9 = 19 % 3 = 1. prime\n 4. Double the last digit and subtract it from the rest of the number and if the\n    result is divisible by 7 then the original number is also divisible by 7 and\n    therefore composite. Example:\n    - 9233: 923 - (3 * 2) = 917 % 7 = 0. composite\n\nThese rules are pulled from here: \nhttps://www.qsleap.com/gmat/resources/math-basics-prime-numbers\n\nThese rules and others have helped increase the rate of prime discovery over\ntime. When I first became interested in the topic the largest discovered prime\nwas 257,885,161 - 1 and at the time of writing this post the largest was 2\n82,589,933 - 1.\n\nPrime Spirals\nI'll keep this spiral explanation brief as the linked video and other\ndocumentation describes it nicely already. The first prime spiral was\ndiscovered/invented by a Polish scientist named Stanislaw Ulam in 1963. He was\ndoodling numbers on a piece of paper in creative patterns and landed on one with\ninteresting properties.\n\nA prime spiral works like this: The number 1 is written as a starting point,\nthen the number 2 is written just to the right of 1. 3 above 2, 4 left of 3,\nagain 5 left of 4, then 6 below 5 and left of 1... maybe this is best described\nin an image.\n\nThis is simply the first 9 numbers but the rest continue in the same manner. The\nnext step is to highlight all of the prime numbers like so:\n\nThe interesting part is that as you scale this up a pattern of diagonal lines\nstarts to appear. The pattern is subtle and appears random which makes sense\nbecause prime numbers are for the most part unpredictable.\n\nWhat's even stranger is that if you start the spiral at 41 instead of 1 and\ncount outward in the same pattern you get a much longer diagonal line spanning\nfrom the middle. The reason this fascinates me is simply that a number system\nthat is theoretically unpredictable arranged in a specific way can produce a\nsomewhat predictable image.\n\nBuilding a web spiral\nI first decided to work on a web version of a prime spiral back in 2014 when I\nwas a student. Back then I didn't know how git worked and I no longer have the\ncode lying around but I'm sure if I did it would be a cringey look into my\ncoding style as a university student.\n\nv1 - jQuery\nAs with most of my fun side projects, Version 1 of my prime spiral was an excuse\nto learn a new technology. At the time I was just getting into web development\nand the technology I wanted to learn was jQuery. jQuery gets looked down on a\nlot for being a completely overkill choice when the only function that gets used\nis the selector and this project was no exception. To make things worse I was\ncalculating factors for each number. My initial commit of V2 used the same prime\ncalculation algorithm as V1.\n\nfunction isPrime(num) {\n  if (num < 2) return false;\n  for (var i = 2; i <= num; i++) {\n    if (num % i == 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nplease excuse my naive 2014 javascriptWhen trying to calculate if the number 21\nis prime I needed to check if each number between 2 and 21 is a factor. The time\ncomplexity of this calculation is O(n) where n is 21 but I needed to calculate\nprime-ness for each number up to 21. This made my algorithm's time complexity\nO(n2). In order to calculate primes up to 21 it took 441 calculations minus a\nfew since I started at 2. Calculating primes up to 10,000 would have required\n100 million calculations.\n\nv2 - Angular\nThe next semester of school was during the explosion of new Javascript\nframeworks, or at least when I became privy to it, so naturally the next\ntechnology I wanted to learn was Angular. With Angular I was able to take\nadvantage of the ng-repeat directive to easily produce N simple square divs. For\nevery number in the loop I calculated if it was a prime and set the background\ncolor if it was. Also before every iteration I calculated which direction the\nnext square would be placed in.\n\n<div id=\"spiral\" class=\"container\">\n  <div class=\"item\"\n       ng-repeat=\"i in getNumber(upperBound - lowerBound + 1) track by $index\"\n       ng-class=\"{prime: isPrime($index + lowerBound)}\"\n       ng-init=\"positionDiv($index + 1)\">\n    {{$index + lowerBound}}\n  </div>\n</div>\n\nactual code from 2015As with the jQuery version, this site was not very\nperformant; Even with a few improvements to the algorithm. I was now only\ncalculating factors up to a square root of  the current number which reduced the\ntime complexity to O(sqrt(n)). The bottleneck of this new version was that I was\ngenerating more HTML DOM elements than the browser and my Core 2 duo 2011\nMacBook Pro could handle. The actual code is available at this 2015 commit\n[https://github.com/Brymastr/spiral/tree/9ae9344be8cb58603ee18cac6cba688ab08fd5cb] \nbut looks something like this:\n\nfunction isPrime(num) {\n  const sqrt = Math.floor(Math.sqrt(num));\n  for (let i = 2; i < sqrt; i++)\n    if (num % i === 0) return false;\n  return num > 1;\n}\n\nv3 - Vue 2\nFast forward to mid 2019 and I'd come a long way in my career and knowledge and\nso had browser technology. With this version I looked at the shortcomings of the\nprevious two and came up with a plan to improve upon them.\n\nThe first obvious area for improvement was the calculation of prime numbers. I\ndecided to get around even needing to calculate primes at all by downloading a\nlist of the first 2 million [https://primes.utm.edu/lists/small/millions/] \nprimes. I then converted that list of primes into a simple text file where 0 \nrepresents composite and 1 represents prime and each bit represents an integer\nfrom 1 to 32,452,843. For example, the first 50 bits look like this:\n\n0110101000101000101000100000101000001000101000100\n\nThis ~30.1MB file (1.6MB gzipped) is hosted on a simple express API at \nhttps://primes.dorsay.dev [https://primes.dorsay.dev/] so that it can be\nstreamed to the vue app (or random internet stranger) upon request. (Update\n2021: this api is no longer available and instead the file is hosted in S3 and\navailable at https://spiral.dorsay.dev/primes.dat.gz). The API adds the \nCache-Control header with a large max-age so your browser will fetch the primes\nfrom local cache until you clear it or you use Firefox Focus. On a decent\ninternet connection, without caching, in the pacific northwest this only takes\n~570ms to download which is a massive improvement over calculating each prime on\nthe client.\n\nThe next major area for improvement was decreasing the sheer number of DOM\nelements that get rendered. I opted for using the HTML5 Canvas API\n[https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API]. This was my first\ntime using it but it was quite straightforward. The algorithm to calculate where\nto place the next square remained unchanged but now instead of rendering a div\nI'm making a call to fillRect for each square. The result is a single rendered\nelement.\n\n<canvas id=\"canvas\"></canvas>\n\nAs the first two versions were quite basic and the max number could not be\nchanged I wanted this version to have a control panel that could control the\nzoom, starting number, ending number, and the colour of the squares. I also\nwanted these control parameters to be saved for future sessions. I opted to use\nmy current favourite frontend JavaScript framework, Vue.js. I've been using it\nfor a while now and the quality of life improvements I get from using the \nvue-cli to generate new projects and my familiarity with the framework justify\nthe likely increase in initial page load time.\n\nv4 - Svelte (update: June 2021)\nIn May of 2021 when I was in the process of migrating all of my hosted sites to\nAWS (How I built this blog [https://dorsay.dev/posts/this-blog]) I decided to\nupgrade this site from Vue 2. I was poking around in the code trying to change\nover from hosting via a custom Dockerfile that I had written to a new\nCloudFormation template for hosting with S3 and CloudFront. I had used Vue\nbefore this site but looking back now I knew a lot less than I thought I did and\nthe code was not very clean. I've done several other Vue sites since then and\nrecently built wealthforynab.com [https://wealthforynab.com] in Vue 3. I wanted\nto upgrade this small site to either Vue 3 or to Svelte [https://svelte.dev/] \nsince I had heard good things about the up-and-coming \"cybernetically enhanced\"\nframework.\n\nThis time around I feel like my frontend skills have much improved and I was\nable to write a very minimal and tidy web app in a single day. The most notable\nchanges other than the framework are:\n\n * Removed Express API that exposes the primes data\n * Migrated from Docker to AWS S3 and CloudFront\n * Moved primes data file to S3 also so that it could be cached with CloudFront\n * Written in Typescript\n * Used Vite [https://vitejs.dev/] instead of vue-cli\n * Updated drawing algorithm\n\nThe previous algorithm for handling drawing logic worked by calculating x/y\ntranslations of the canvas context, drawing a square, and then saving the\ncontext. It was also quite convoluted in that it used 3 loops to figure out\npositioning. The new algorithm doesn't bother with context translation or saving\nof context state and simply keeps track of the current drawing offset on every\niteration of its single loop.\n\nThe algorithm went from this: (simplified for easier display)\n\nlet i = 0;\nlet increment = 1; // used to decide squares in one direction\nmaxSquares:\nwhile(true) {\n  // Change direction every two loops of j\n  for(j = 0; j < 2; j++) {            \n    // increases by one every two loops of j\n    for(k = 0; k < increment; k++) {  \n      let translate = ... // complex translation calculation\n      context.save();     // save canvas context\n      context.translate(translate.x, translate.y);\n      if(isPrime(i)) context.fillRect(...) // actual draw\n      if(++i > maxNumber) break maxNumber;\n    }\n  }\n  increment++;\n}\n\nTo this: (also simplified)\n\nlet stretchIndex = 0;     // each 'stretch' is squares in one direction\nlet stretchLength = 1;    // every 2 direction changes it increases 1\nlet stretchTraversed = 0; \n\n\nfor (let i = 0, j = start; j < end; i++, j++) {\n  if (isPrime(j)) ctx.fillRect(...); // actual draw\n  const [xDirection, yDirection] = ...// change according to index\n  currentX += xDirection * itemSize;\n  currentY += yDirection * itemSize;\n\n  stretchTraversed++;\n  if (stretchTraversed >= stretchLength) {\n    stretchIndex++;\n    stretchTraversed = 0;\n    if (stretchIndex % 2 === 0) ++stretchLength;\n  }\n}\n\nActual v3 draw function.\n[https://github.com/Brymastr/spiral/blob/f6ba96249ef0dd2a0c86a133adfc16dabbfd900c/spiral.js#L52]\nActual v4 draw function.\n[https://github.com/Brymastr/spiral/blob/55f21ee787ff1f9e5374a147d2db554bc0021aed/src/lib/Canvas.svelte#L56]\n\nThe new codebase is actually longer in total but the bundled result is\nsignificantly smaller thanks to Svelte. The app is faster to load and render now\nwhich may be due to the change to Svelte but it may also just be that computers\nare faster these days. Other than these differences the site is visually and\nfunctionally the same as the previous version. This was just an excuse for me to\ntry out a new framework. If you'd like to mess around with v4 you can try it out\nat https://spiral.dorsay.dev [https://spiral.dorsay.dev/]. The code for this\nproject is available at my Github account [https://github.com/Brymastr/spiral].\n\nConclusion\nThere are many more ways to improve upon my naive methods of calculating prime\nnumbers. There's a reason that there are challenges with monetary rewards to\ncalculate the next prime number beyond what is currently possible. When it comes\nto theories and conjectures and whatnots I don't really know what I'm talking\nabout and that's not the point of this post. I just wanted to show off my fun\nlittle project. People much smarter than me can explain this much better and\nwill probably make further steps to solving the prime pattern in the near\nfuture. I find this to be a fascinating phenomenon that will hopefully one day\nbecome a formula.\n\nThis is the article that inspired me to publish my spiral site and this post:\n\nA Big Question About Prime Numbers Gets a Partial AnswerThe twin primes\nconjecture has bedeviled mathematicians for more than a century. Now there’s a\nsolution for one version of it.WIREDKevin Hartnett\n[https://www.wired.com/story/a-big-question-about-prime-numbers-gets-a-partial-answer/]","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","author_id":"1","created_at":"2021-05-29 23:12:48","created_by":"1","updated_at":"2021-06-13 00:20:43","updated_by":"1","published_at":"2019-10-26 23:17:00","published_by":"1","custom_excerpt":"Prime Spirals are an interesting topic to me and I wanted to play around with them in website format. I was dissatisfied with the existing offerings so I decided to make my own... 4 times in 7 years. Try it out here.","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"60b2cb89351df9000153b6db","uuid":"45438b31-bcc7-43b2-87e6-2b4192963096","title":"Me","slug":"me","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[[\"a\",[\"href\",\"https://baileynelson.com/\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"I’m a mixed bag Software Engineer living in the best place on earth, Vancouver BC. I am currently working at \"],[0,[0],1,\"Bailey Nelson\"],[0,[],0,\", a forward-thinking eyewear and eye-care company based in Sydney, Australia building both internal systems and customer facing products.\"]]],[1,\"p\",[[0,[],0,\"I love the power that fingers on a keyboard can have and I crave the kind of success that can come from technology and programming. There have been many times in my career where I have come across a problem that was not immediately solvable by a simple Google or StackOverflow search. It took me a while to realize that my solutions to said problems may be a learning opportunity for others struggling with similar issues. I’ve decided to start documenting any tasks I work on that I think are interesting or more difficult than expected. I welcome comments on these posts that foster discussion, suggest amendments, or simply offer opinions.\"]]],[1,\"p\",[[0,[],0,\"I don’t have an email list, a podcast, or any products to sell. I just want to provide a window into a software engineer’s day-to-day and I hope to be a relatable 3rd party opinion to other developers.\"]]]],\"ghostVersion\":\"4.0\"}","html":"<p>I’m a mixed bag Software Engineer living in the best place on earth, Vancouver BC. I am currently working at <a href=\"https://baileynelson.com/\">Bailey Nelson</a>, a forward-thinking eyewear and eye-care company based in Sydney, Australia building both internal systems and customer facing products.</p><p>I love the power that fingers on a keyboard can have and I crave the kind of success that can come from technology and programming. There have been many times in my career where I have come across a problem that was not immediately solvable by a simple Google or StackOverflow search. It took me a while to realize that my solutions to said problems may be a learning opportunity for others struggling with similar issues. I’ve decided to start documenting any tasks I work on that I think are interesting or more difficult than expected. I welcome comments on these posts that foster discussion, suggest amendments, or simply offer opinions.</p><p>I don’t have an email list, a podcast, or any products to sell. I just want to provide a window into a software engineer’s day-to-day and I hope to be a relatable 3rd party opinion to other developers.</p>","comment_id":"60b2cb89351df9000153b6db","plaintext":"I’m a mixed bag Software Engineer living in the best place on earth, Vancouver\nBC. I am currently working at Bailey Nelson [https://baileynelson.com/], a\nforward-thinking eyewear and eye-care company based in Sydney, Australia\nbuilding both internal systems and customer facing products.\n\nI love the power that fingers on a keyboard can have and I crave the kind of\nsuccess that can come from technology and programming. There have been many\ntimes in my career where I have come across a problem that was not immediately\nsolvable by a simple Google or StackOverflow search. It took me a while to\nrealize that my solutions to said problems may be a learning opportunity for\nothers struggling with similar issues. I’ve decided to start documenting any\ntasks I work on that I think are interesting or more difficult than expected. I\nwelcome comments on these posts that foster discussion, suggest amendments, or\nsimply offer opinions.\n\nI don’t have an email list, a podcast, or any products to sell. I just want to\nprovide a window into a software engineer’s day-to-day and I hope to be a\nrelatable 3rd party opinion to other developers.","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","author_id":"1","created_at":"2021-05-29 23:17:29","created_by":"1","updated_at":"2021-05-31 00:28:41","updated_by":"1","published_at":"2019-01-05 23:18:00","published_by":"1","custom_excerpt":"I’m a mixed bag Software Engineer living in the best place on earth, Vancouver BC. I am currently working at Bailey Nelson, an eyewear and eye-care company based in Sydney Australia, building both internal systems and customer facing products.","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"60b44c79f96b6500014611e3","uuid":"b303e8cb-09ad-46d2-8295-93766dabbb55","title":"How I built this blog","slug":"this-blog","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"hr\",{}],[\"code\",{\"code\":\"import posts from './posts.json';\\n\\nconst Post = ({ title, date, content }) => {\\n  ...\\n  return (\\n    <div dangerouslySetInnerHTML={{ __html: content }} />\\n  );\\n}\\n  \",\"language\":\"typescript\",\"caption\":\"Importing json posts and rendering html dangerously.\"}],[\"code\",{\"code\":\"{\\n  \\\"id\\\": \\\"60b2c7338e987b0001441824\\\",\\n  \\\"uuid\\\": \\\"365392b9-6333-4275-9ada-08860867b58b\\\",\\n  \\\"title\\\": \\\"Git clone and cd in one command\\\",\\n  \\\"slug\\\": \\\"git-clone-and-cd-in-one-command\\\",\\n  \\\"html\\\": \\\"<div> A GIANT STRING OF UNFOIRMATTED HTML ...\\\",\\n  ... many other keys\\n}\",\"language\":\"json\"}],[\"code\",{\"language\":\"yaml\",\"code\":\"version: '3.8'\\n\\nservices:\\n  ghost:\\n    image: ghost:alpine\\n    ports:\\n      - '3001:2368'\\n    volumes:\\n      - $PWD/ghost:/var/lib/ghost/content\\n    environment:\\n      url: http://localhost:3001\\n\\n  webhook:\\n    build: webhook\\n    hostname: webhook.local\\n    volumes:\\n      - $PWD/posts.json:/home/node/posts.json\\n    init: true\\n    environment:\\n      API_KEY: $API_KEY\\n\"}],[\"code\",{\"language\":\"bash\",\"code\":\"# Spin up Ghost and the webhook handler\\ndocker-compose up -d --build\\n\\n# Open the browser to the posts page in Ghost\\nsensible-browser \\\"http://localhost:3001/ghost/#/posts\\\"\\n\\n# This is a function to bring down containers\\n#   after the script exits\\nfunction cleanup {\\n  docker-compose down\\n}\\n\\ntrap cleanup EXIT\"}],[\"code\",{\"language\":\"bash\",\"code\":\"# Spin up Ghost and the webhook handler\\ndocker-compose up -d --build\\n\\n# This block is a loop that exits as soon as the posts.json\\n#   file has been created.\\nattempts=0\\nmaxAttempts=25\\nwhile ! [ -s \\\"posts.json\\\" ] && [ $attempts -lt $maxAttempts ]; do\\n  ((attempts=attempts+1))\\n  echo \\\"waiting for posts to be exported...\\\"\\n  sleep 1\\ndone\\n\\n# Bring down containers afterward\\ndocker-compose down\\n\\n# Build the Next.js site now that posts.json is available\\nnext build && next export -o dist\\n\"}],[\"code\",{\"language\":\"yaml\",\"code\":\"...\\nbuild-and-deploy:\\n  runs-on: ubuntu-latest\\n\\n  steps:\\n    - name: Checkout code\\n      uses: actions/checkout@v2\\n\\n    - name: Configure AWS credentials\\n      id: creds\\n      uses: aws-actions/configure-aws-credentials@v1\\n      with:\\n        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\\n        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\\n        aws-region: ${{ secrets.AWS_REGION }}\\n\\n    - name: Install\\n      run: npm ci\\n\\n    - name: Build\\n      run: npm run build\\n\\n    - name: Deploy\\n      run: |\\n        aws s3 sync --cache-control 'max-age=604800' --exclude index.html dist s3://$BUCKET_NAME\\n        aws s3 sync --cache-control 'no-cache' dist s3://$BUCKET_NAME\\n        aws cloudfront create-invalidation --distribution-id=$DISTRIBUTION_ID --paths / /posts/*\"}],[\"bookmark\",{\"url\":\"https://github.com/Brymastr/blog\",\"metadata\":{\"url\":\"https://github.com/Brymastr/blog\",\"title\":\"Brymastr/blog\",\"description\":\"Contribute to Brymastr/blog development by creating an account on GitHub.\",\"author\":\"Brymastr\",\"publisher\":\"GitHub\",\"thumbnail\":\"https://opengraph.githubassets.com/94101baa46347cab612d85167660eccf21fd80a06980ad505cc0d4e7a924340b/Brymastr/blog\",\"icon\":\"https://github.githubassets.com/favicons/favicon.svg\"}}]],\"markups\":[[\"a\",[\"href\",\"https://ghost.org/\"]],[\"a\",[\"href\",\"https://ghost.org/help/using-the-editor\"]],[\"a\",[\"href\",\"https://dorsay.dev/posts/me\"]],[\"a\",[\"href\",\"https://traefik.io/\"]],[\"code\"],[\"a\",[\"href\",\"https://nextjs.org/docs/api-reference/create-next-app\"]],[\"a\",[\"href\",\"https://tailwindcss.com/\"]]],\"sections\":[[1,\"h3\",[[0,[],0,\"TLDR:\"]]],[1,\"p\",[[0,[0],1,\"Ghost CMS\"],[0,[],0,\" is great but it's at least $10 per month to run. I wanted a cheap and serverless way of hosting this site but I also really liked the Ghost \"],[0,[1],1,\"editor\"],[0,[],0,\" so I devised a seamless method of using the editor locally and compiling the resulting posts into a server-side rendered Next.js site.\"]]],[10,0],[1,\"h3\",[[0,[],0,\"Choosing a platform\"]]],[1,\"p\",[[0,[],0,\"As I stated in \"],[0,[2],1,\"my first post\"],[0,[],0,\" this website is simply about documenting my experience as a software developer; I have no intention of monetizing this site. It's strictly for me, and hopefully for you although you're probably the first person to ever read this. When I was searching for a really simple and free blogging solution I came across Ghost. They had just come out with a paid hosted solution for ~$10 a month but it was an open source project so it could also be self hosted. One of the highlights was that it was written in JavaScript which was a plus at the time compared to Wordpress and Drupal and others that were chunky PHP setups. Another highlight was that it already had a prebuilt Docker image ready to go which made hosting the site myself super straightforward. At the time my preferred hosting configuration was Docker on Ubuntu using docker-compose with \"],[0,[3],1,\"Traefik\"],[0,[],0,\" to manage TLS and routing. Dockerized Ghost fit right into my favourite architecture.\"]]],[1,\"p\",[[0,[],0,\"Also at the time I had a couple of small websites I was hosting on a Digital Ocean droplet already and figured I could just drop this Ghost docker container into the mix and be done with it. What I didn't take into account was that Ghost requires a database and prefers MySQL so now I also had to host the MySQL container. I found out that with all of these containers my small droplet didn't have enough memory to handle them so I had to increase the size of the droplet to the $15/month option. I ran that group of sites for about two years and receiving a $15 bill every month, although not a lot of money, always made me think I could do the same thing for free.\"]]],[1,\"h3\",[[0,[],0,\"Migrating to AWS\"]]],[1,\"p\",[[0,[],0,\"The story so far took place in 2019. In mid 2020 at Bailey Nelson we started leaning into serverless AWS technologies like Lambda, API Gateway, S3, and Cloudfront. I had done several projects with the new tech stack and after the first few actually started to enjoy it. Two of the biggest benefits of these AWS technologies is that you no longer need to monitor uptime, and that the cost to run them at small to medium scale is free or extremely cheap. Free and no-maintenance is the perfect combo for personal, non-monetized websites so I decided to dive into this migration.\"]]],[1,\"p\",[[0,[],0,\"The migration of most backend services and sites was fairly straightforward and completed successfully. The site that took the longest to migrate was this blog site. Since there is no clean way to run Ghost in a serverless environment, and since EC2 costs are generally higher than that of Digital Ocean droplets, I decided to find a new way to write and host this blog. This takes us to May 2021. I had been using a free theme for Ghost that I found online somewhere which was a server rendered handlebars template, as all Ghost themes were before Ghost 4.0 went headless. The hottest website technology at the time was (is) Next.js and server-side rendering. Having only written a couple React sites before I thought this was a great opportunity to work out my React and CSS muscles as well as learn what all the Next.js hype was about.\"]]],[1,\"h3\",[[0,[],0,\"New site in Next.js\"]]],[1,\"p\",[[0,[],0,\"I was able to get a static site up and running via \"],[0,[4,5],2,\"create-next-app\"],[0,[],0,\" and added Typescript and \"],[0,[6],1,\"Tailwindcss\"],[0,[],0,\" support right off the bat. The site I put together in a matter of hours in one day was functional and looked similar to the old Ghost site and I was pretty proud of myself. For the blog post content I took an export of my data from the Ghost site and stripped out the posts into a JSON file. I simply module-imported the JSON posts into the site and then used \"],[0,[4],1,\"dangerouslySetInnerHTML\"],[0,[],0,\" to render the HTML version. Something like this:\"]]],[10,1],[1,\"p\",[[0,[],0,\"This worked well to render the existing posts I had but the problem that is immediately apparent is that the only way to write new posts is to write raw HTML into a JSON file that looks like this:\"]]],[10,2],[1,\"p\",[[0,[],0,\"This is obviously not ideal. I needed to find a new WYSIWYG editor to write posts in. There don't seem to be that many out there, especially decent free ones, and even with those free ones I wouldn't be able to easily compile the resulting HTML into something that my site could easily render.\"]]],[1,\"h3\",[[0,[],0,\"The Solution\"]]],[1,\"p\",[[0,[],0,\"I woke up one morning, jumped in the shower, and proceeded to design exactly how I would write posts in an editor, compile those posts into a JSON file, and live reload the website while I write. Ghost was still the solution in my mind. I loved the editor for its looks, its functionality, and its simplicity and there was just no acceptable replacement; I had to have it.\"]]],[1,\"p\",[[0,[],0,\"The solution was firstly to Dockerize Ghost and secondly to write a webhook handler Docker image that logs into the Ghost Admin API to download all posts whenever a post was created/updated/deleted. The two Docker containers are managed by docker-compose like so:\"]]],[10,3],[1,\"p\",[[0,[],0,\"I wrote two bash scripts. One to handle opening the Ghost editor and exporting the posts and the other to build my website including the most up to date version of posts. Both scripts rely on running the two containers via \"],[0,[4],1,\"docker-compose\"],[0,[],0,\" with a SQLite database that is bind-mounted to a folder at the root of the project. The \"],[0,[4],1,\"data\"],[0,[],0,\" folder of the mounted volume is included in git and acts as post content management.\"]]],[1,\"p\",[[0,[],0,\"Opening the Ghost editor:\"]]],[10,4],[1,\"p\",[[0,[],0,\"When I want to write a new post I just open my repo in a terminal and run \"],[0,[4],1,\"npm run editor\"],[0,[],0,\" which runs this script and opens Ghost to the posts page and gets me going immediately. The webhook container is called whenever I edit a post and exports all of the posts to a file called \"],[0,[4],1,\"posts.json\"],[0,[],0,\". I don't even need to include this json file in git since it can be recreated every time I want to edit and also when the whole project is built. The reason for using a json file is that because my react site imports the file, Next.js dev server will do a fast refresh with the new content. This means that I can see what the post will look like on my website while I'm writing it.\"]]],[1,\"p\",[[0,[],0,\"Building the site for deployment:\"]]],[10,5],[1,\"p\",[[0,[],0,\"This script spins up the docker-compose architecture, exports a \"],[0,[4],1,\"posts.json\"],[0,[],0,\" file that contains the current state of all posts in the Ghost volume, and then builds the Next.js site and exports it to the \"],[0,[4],1,\"dist\"],[0,[],0,\" directory. I am able to use the same webhook container since even though I don't need the webhooks portion of it I just reuse the first stage which is to export posts on boot. As soon as the posts are exported the containers are killed.\"]]],[1,\"p\",[[0,[],0,\"Lastly I have a GitHub Actions workflow to handle CI/CD for building and deploying changes to both the website code as well as blog post content.\"]]],[10,6],[1,\"p\",[[0,[],0,\"This github actions job runs the build script and then deploys the \"],[0,[4],1,\"dist\"],[0,[],0,\" directory to S3 and performs a Cloudfront cache invalidation.\"]]],[1,\"h3\",[[0,[],0,\"Conclusion\"]]],[1,\"p\",[[0,[],0,\"This is a great way to use Ghost for editing a blog but also to compile the website and posts into a static website. The editing experience is excellent thanks to Ghost and the only technical requirements for writing are \"],[0,[4],1,\"node\"],[0,[],0,\" and \"],[0,[4],1,\"Docker\"],[0,[],0,\". If you wanted to do something similar you could fork this repo and simply replace my posts with your own. If you also have AWS SAM installed and you're familiar with it you could have a great static blog site deployed in as long as it takes SAM and GitHub Actions to build your templates.\"]]],[10,7],[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","html":"<h3 id=\"tldr\">TLDR:</h3><p><a href=\"https://ghost.org/\">Ghost CMS</a> is great but it's at least $10 per month to run. I wanted a cheap and serverless way of hosting this site but I also really liked the Ghost <a href=\"https://ghost.org/help/using-the-editor\">editor</a> so I devised a seamless method of using the editor locally and compiling the resulting posts into a server-side rendered Next.js site.</p><hr><h3 id=\"choosing-a-platform\">Choosing a platform</h3><p>As I stated in <a href=\"https://dorsay.dev/posts/me\">my first post</a> this website is simply about documenting my experience as a software developer; I have no intention of monetizing this site. It's strictly for me, and hopefully for you although you're probably the first person to ever read this. When I was searching for a really simple and free blogging solution I came across Ghost. They had just come out with a paid hosted solution for ~$10 a month but it was an open source project so it could also be self hosted. One of the highlights was that it was written in JavaScript which was a plus at the time compared to Wordpress and Drupal and others that were chunky PHP setups. Another highlight was that it already had a prebuilt Docker image ready to go which made hosting the site myself super straightforward. At the time my preferred hosting configuration was Docker on Ubuntu using docker-compose with <a href=\"https://traefik.io/\">Traefik</a> to manage TLS and routing. Dockerized Ghost fit right into my favourite architecture.</p><p>Also at the time I had a couple of small websites I was hosting on a Digital Ocean droplet already and figured I could just drop this Ghost docker container into the mix and be done with it. What I didn't take into account was that Ghost requires a database and prefers MySQL so now I also had to host the MySQL container. I found out that with all of these containers my small droplet didn't have enough memory to handle them so I had to increase the size of the droplet to the $15/month option. I ran that group of sites for about two years and receiving a $15 bill every month, although not a lot of money, always made me think I could do the same thing for free.</p><h3 id=\"migrating-to-aws\">Migrating to AWS</h3><p>The story so far took place in 2019. In mid 2020 at Bailey Nelson we started leaning into serverless AWS technologies like Lambda, API Gateway, S3, and Cloudfront. I had done several projects with the new tech stack and after the first few actually started to enjoy it. Two of the biggest benefits of these AWS technologies is that you no longer need to monitor uptime, and that the cost to run them at small to medium scale is free or extremely cheap. Free and no-maintenance is the perfect combo for personal, non-monetized websites so I decided to dive into this migration.</p><p>The migration of most backend services and sites was fairly straightforward and completed successfully. The site that took the longest to migrate was this blog site. Since there is no clean way to run Ghost in a serverless environment, and since EC2 costs are generally higher than that of Digital Ocean droplets, I decided to find a new way to write and host this blog. This takes us to May 2021. I had been using a free theme for Ghost that I found online somewhere which was a server rendered handlebars template, as all Ghost themes were before Ghost 4.0 went headless. The hottest website technology at the time was (is) Next.js and server-side rendering. Having only written a couple React sites before I thought this was a great opportunity to work out my React and CSS muscles as well as learn what all the Next.js hype was about.</p><h3 id=\"new-site-in-nextjs\">New site in Next.js</h3><p>I was able to get a static site up and running via <code><a href=\"https://nextjs.org/docs/api-reference/create-next-app\">create-next-app</a></code> and added Typescript and <a href=\"https://tailwindcss.com/\">Tailwindcss</a> support right off the bat. The site I put together in a matter of hours in one day was functional and looked similar to the old Ghost site and I was pretty proud of myself. For the blog post content I took an export of my data from the Ghost site and stripped out the posts into a JSON file. I simply module-imported the JSON posts into the site and then used <code>dangerouslySetInnerHTML</code> to render the HTML version. Something like this:</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-typescript\">import posts from './posts.json';\n\nconst Post = ({ title, date, content }) =&gt; {\n  ...\n  return (\n    &lt;div dangerouslySetInnerHTML={{ __html: content }} /&gt;\n  );\n}\n  </code></pre><figcaption>Importing json posts and rendering html dangerously.</figcaption></figure><p>This worked well to render the existing posts I had but the problem that is immediately apparent is that the only way to write new posts is to write raw HTML into a JSON file that looks like this:</p><pre><code class=\"language-json\">{\n  \"id\": \"60b2c7338e987b0001441824\",\n  \"uuid\": \"365392b9-6333-4275-9ada-08860867b58b\",\n  \"title\": \"Git clone and cd in one command\",\n  \"slug\": \"git-clone-and-cd-in-one-command\",\n  \"html\": \"&lt;div&gt; A GIANT STRING OF UNFOIRMATTED HTML ...\",\n  ... many other keys\n}</code></pre><p>This is obviously not ideal. I needed to find a new WYSIWYG editor to write posts in. There don't seem to be that many out there, especially decent free ones, and even with those free ones I wouldn't be able to easily compile the resulting HTML into something that my site could easily render.</p><h3 id=\"the-solution\">The Solution</h3><p>I woke up one morning, jumped in the shower, and proceeded to design exactly how I would write posts in an editor, compile those posts into a JSON file, and live reload the website while I write. Ghost was still the solution in my mind. I loved the editor for its looks, its functionality, and its simplicity and there was just no acceptable replacement; I had to have it.</p><p>The solution was firstly to Dockerize Ghost and secondly to write a webhook handler Docker image that logs into the Ghost Admin API to download all posts whenever a post was created/updated/deleted. The two Docker containers are managed by docker-compose like so:</p><pre><code class=\"language-yaml\">version: '3.8'\n\nservices:\n  ghost:\n    image: ghost:alpine\n    ports:\n      - '3001:2368'\n    volumes:\n      - $PWD/ghost:/var/lib/ghost/content\n    environment:\n      url: http://localhost:3001\n\n  webhook:\n    build: webhook\n    hostname: webhook.local\n    volumes:\n      - $PWD/posts.json:/home/node/posts.json\n    init: true\n    environment:\n      API_KEY: $API_KEY\n</code></pre><p>I wrote two bash scripts. One to handle opening the Ghost editor and exporting the posts and the other to build my website including the most up to date version of posts. Both scripts rely on running the two containers via <code>docker-compose</code> with a SQLite database that is bind-mounted to a folder at the root of the project. The <code>data</code> folder of the mounted volume is included in git and acts as post content management.</p><p>Opening the Ghost editor:</p><pre><code class=\"language-bash\"># Spin up Ghost and the webhook handler\ndocker-compose up -d --build\n\n# Open the browser to the posts page in Ghost\nsensible-browser \"http://localhost:3001/ghost/#/posts\"\n\n# This is a function to bring down containers\n#   after the script exits\nfunction cleanup {\n  docker-compose down\n}\n\ntrap cleanup EXIT</code></pre><p>When I want to write a new post I just open my repo in a terminal and run <code>npm run editor</code> which runs this script and opens Ghost to the posts page and gets me going immediately. The webhook container is called whenever I edit a post and exports all of the posts to a file called <code>posts.json</code>. I don't even need to include this json file in git since it can be recreated every time I want to edit and also when the whole project is built. The reason for using a json file is that because my react site imports the file, Next.js dev server will do a fast refresh with the new content. This means that I can see what the post will look like on my website while I'm writing it.</p><p>Building the site for deployment:</p><pre><code class=\"language-bash\"># Spin up Ghost and the webhook handler\ndocker-compose up -d --build\n\n# This block is a loop that exits as soon as the posts.json\n#   file has been created.\nattempts=0\nmaxAttempts=25\nwhile ! [ -s \"posts.json\" ] &amp;&amp; [ $attempts -lt $maxAttempts ]; do\n  ((attempts=attempts+1))\n  echo \"waiting for posts to be exported...\"\n  sleep 1\ndone\n\n# Bring down containers afterward\ndocker-compose down\n\n# Build the Next.js site now that posts.json is available\nnext build &amp;&amp; next export -o dist\n</code></pre><p>This script spins up the docker-compose architecture, exports a <code>posts.json</code> file that contains the current state of all posts in the Ghost volume, and then builds the Next.js site and exports it to the <code>dist</code> directory. I am able to use the same webhook container since even though I don't need the webhooks portion of it I just reuse the first stage which is to export posts on boot. As soon as the posts are exported the containers are killed.</p><p>Lastly I have a GitHub Actions workflow to handle CI/CD for building and deploying changes to both the website code as well as blog post content.</p><pre><code class=\"language-yaml\">...\nbuild-and-deploy:\n  runs-on: ubuntu-latest\n\n  steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Configure AWS credentials\n      id: creds\n      uses: aws-actions/configure-aws-credentials@v1\n      with:\n        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n        aws-region: ${{ secrets.AWS_REGION }}\n\n    - name: Install\n      run: npm ci\n\n    - name: Build\n      run: npm run build\n\n    - name: Deploy\n      run: |\n        aws s3 sync --cache-control 'max-age=604800' --exclude index.html dist s3://$BUCKET_NAME\n        aws s3 sync --cache-control 'no-cache' dist s3://$BUCKET_NAME\n        aws cloudfront create-invalidation --distribution-id=$DISTRIBUTION_ID --paths / /posts/*</code></pre><p>This github actions job runs the build script and then deploys the <code>dist</code> directory to S3 and performs a Cloudfront cache invalidation.</p><h3 id=\"conclusion\">Conclusion</h3><p>This is a great way to use Ghost for editing a blog but also to compile the website and posts into a static website. The editing experience is excellent thanks to Ghost and the only technical requirements for writing are <code>node</code> and <code>Docker</code>. If you wanted to do something similar you could fork this repo and simply replace my posts with your own. If you also have AWS SAM installed and you're familiar with it you could have a great static blog site deployed in as long as it takes SAM and GitHub Actions to build your templates.</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://github.com/Brymastr/blog\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Brymastr/blog</div><div class=\"kg-bookmark-description\">Contribute to Brymastr/blog development by creating an account on GitHub.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://github.githubassets.com/favicons/favicon.svg\"><span class=\"kg-bookmark-author\">GitHub</span><span class=\"kg-bookmark-publisher\">Brymastr</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://opengraph.githubassets.com/94101baa46347cab612d85167660eccf21fd80a06980ad505cc0d4e7a924340b/Brymastr/blog\"></div></a></figure>","comment_id":"60b44c79f96b6500014611e3","plaintext":"TLDR:\nGhost CMS [https://ghost.org/] is great but it's at least $10 per month to run.\nI wanted a cheap and serverless way of hosting this site but I also really liked\nthe Ghost editor [https://ghost.org/help/using-the-editor] so I devised a\nseamless method of using the editor locally and compiling the resulting posts\ninto a server-side rendered Next.js site.\n\n\n--------------------------------------------------------------------------------\n\nChoosing a platform\nAs I stated in my first post [https://dorsay.dev/posts/me] this website is\nsimply about documenting my experience as a software developer; I have no\nintention of monetizing this site. It's strictly for me, and hopefully for you\nalthough you're probably the first person to ever read this. When I was\nsearching for a really simple and free blogging solution I came across Ghost.\nThey had just come out with a paid hosted solution for ~$10 a month but it was\nan open source project so it could also be self hosted. One of the highlights\nwas that it was written in JavaScript which was a plus at the time compared to\nWordpress and Drupal and others that were chunky PHP setups. Another highlight\nwas that it already had a prebuilt Docker image ready to go which made hosting\nthe site myself super straightforward. At the time my preferred hosting\nconfiguration was Docker on Ubuntu using docker-compose with Traefik\n[https://traefik.io/] to manage TLS and routing. Dockerized Ghost fit right into\nmy favourite architecture.\n\nAlso at the time I had a couple of small websites I was hosting on a Digital\nOcean droplet already and figured I could just drop this Ghost docker container\ninto the mix and be done with it. What I didn't take into account was that Ghost\nrequires a database and prefers MySQL so now I also had to host the MySQL\ncontainer. I found out that with all of these containers my small droplet didn't\nhave enough memory to handle them so I had to increase the size of the droplet\nto the $15/month option. I ran that group of sites for about two years and\nreceiving a $15 bill every month, although not a lot of money, always made me\nthink I could do the same thing for free.\n\nMigrating to AWS\nThe story so far took place in 2019. In mid 2020 at Bailey Nelson we started\nleaning into serverless AWS technologies like Lambda, API Gateway, S3, and\nCloudfront. I had done several projects with the new tech stack and after the\nfirst few actually started to enjoy it. Two of the biggest benefits of these AWS\ntechnologies is that you no longer need to monitor uptime, and that the cost to\nrun them at small to medium scale is free or extremely cheap. Free and\nno-maintenance is the perfect combo for personal, non-monetized websites so I\ndecided to dive into this migration.\n\nThe migration of most backend services and sites was fairly straightforward and\ncompleted successfully. The site that took the longest to migrate was this blog\nsite. Since there is no clean way to run Ghost in a serverless environment, and\nsince EC2 costs are generally higher than that of Digital Ocean droplets, I\ndecided to find a new way to write and host this blog. This takes us to May\n2021. I had been using a free theme for Ghost that I found online somewhere\nwhich was a server rendered handlebars template, as all Ghost themes were before\nGhost 4.0 went headless. The hottest website technology at the time was (is)\nNext.js and server-side rendering. Having only written a couple React sites\nbefore I thought this was a great opportunity to work out my React and CSS\nmuscles as well as learn what all the Next.js hype was about.\n\nNew site in Next.js\nI was able to get a static site up and running via create-next-app\n[https://nextjs.org/docs/api-reference/create-next-app] and added Typescript and \nTailwindcss [https://tailwindcss.com/] support right off the bat. The site I put\ntogether in a matter of hours in one day was functional and looked similar to\nthe old Ghost site and I was pretty proud of myself. For the blog post content I\ntook an export of my data from the Ghost site and stripped out the posts into a\nJSON file. I simply module-imported the JSON posts into the site and then used \ndangerouslySetInnerHTML to render the HTML version. Something like this:\n\nimport posts from './posts.json';\n\nconst Post = ({ title, date, content }) => {\n  ...\n  return (\n    <div dangerouslySetInnerHTML={{ __html: content }} />\n  );\n}\n  \n\nImporting json posts and rendering html dangerously.This worked well to render\nthe existing posts I had but the problem that is immediately apparent is that\nthe only way to write new posts is to write raw HTML into a JSON file that looks\nlike this:\n\n{\n  \"id\": \"60b2c7338e987b0001441824\",\n  \"uuid\": \"365392b9-6333-4275-9ada-08860867b58b\",\n  \"title\": \"Git clone and cd in one command\",\n  \"slug\": \"git-clone-and-cd-in-one-command\",\n  \"html\": \"<div> A GIANT STRING OF UNFOIRMATTED HTML ...\",\n  ... many other keys\n}\n\nThis is obviously not ideal. I needed to find a new WYSIWYG editor to write\nposts in. There don't seem to be that many out there, especially decent free\nones, and even with those free ones I wouldn't be able to easily compile the\nresulting HTML into something that my site could easily render.\n\nThe Solution\nI woke up one morning, jumped in the shower, and proceeded to design exactly how\nI would write posts in an editor, compile those posts into a JSON file, and live\nreload the website while I write. Ghost was still the solution in my mind. I\nloved the editor for its looks, its functionality, and its simplicity and there\nwas just no acceptable replacement; I had to have it.\n\nThe solution was firstly to Dockerize Ghost and secondly to write a webhook\nhandler Docker image that logs into the Ghost Admin API to download all posts\nwhenever a post was created/updated/deleted. The two Docker containers are\nmanaged by docker-compose like so:\n\nversion: '3.8'\n\nservices:\n  ghost:\n    image: ghost:alpine\n    ports:\n      - '3001:2368'\n    volumes:\n      - $PWD/ghost:/var/lib/ghost/content\n    environment:\n      url: http://localhost:3001\n\n  webhook:\n    build: webhook\n    hostname: webhook.local\n    volumes:\n      - $PWD/posts.json:/home/node/posts.json\n    init: true\n    environment:\n      API_KEY: $API_KEY\n\n\nI wrote two bash scripts. One to handle opening the Ghost editor and exporting\nthe posts and the other to build my website including the most up to date\nversion of posts. Both scripts rely on running the two containers via \ndocker-compose with a SQLite database that is bind-mounted to a folder at the\nroot of the project. The data folder of the mounted volume is included in git\nand acts as post content management.\n\nOpening the Ghost editor:\n\n# Spin up Ghost and the webhook handler\ndocker-compose up -d --build\n\n# Open the browser to the posts page in Ghost\nsensible-browser \"http://localhost:3001/ghost/#/posts\"\n\n# This is a function to bring down containers\n#   after the script exits\nfunction cleanup {\n  docker-compose down\n}\n\ntrap cleanup EXIT\n\nWhen I want to write a new post I just open my repo in a terminal and run npm\nrun editor which runs this script and opens Ghost to the posts page and gets me\ngoing immediately. The webhook container is called whenever I edit a post and\nexports all of the posts to a file called posts.json. I don't even need to\ninclude this json file in git since it can be recreated every time I want to\nedit and also when the whole project is built. The reason for using a json file\nis that because my react site imports the file, Next.js dev server will do a\nfast refresh with the new content. This means that I can see what the post will\nlook like on my website while I'm writing it.\n\nBuilding the site for deployment:\n\n# Spin up Ghost and the webhook handler\ndocker-compose up -d --build\n\n# This block is a loop that exits as soon as the posts.json\n#   file has been created.\nattempts=0\nmaxAttempts=25\nwhile ! [ -s \"posts.json\" ] && [ $attempts -lt $maxAttempts ]; do\n  ((attempts=attempts+1))\n  echo \"waiting for posts to be exported...\"\n  sleep 1\ndone\n\n# Bring down containers afterward\ndocker-compose down\n\n# Build the Next.js site now that posts.json is available\nnext build && next export -o dist\n\n\nThis script spins up the docker-compose architecture, exports a posts.json file\nthat contains the current state of all posts in the Ghost volume, and then\nbuilds the Next.js site and exports it to the dist directory. I am able to use\nthe same webhook container since even though I don't need the webhooks portion\nof it I just reuse the first stage which is to export posts on boot. As soon as\nthe posts are exported the containers are killed.\n\nLastly I have a GitHub Actions workflow to handle CI/CD for building and\ndeploying changes to both the website code as well as blog post content.\n\n...\nbuild-and-deploy:\n  runs-on: ubuntu-latest\n\n  steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Configure AWS credentials\n      id: creds\n      uses: aws-actions/configure-aws-credentials@v1\n      with:\n        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n        aws-region: ${{ secrets.AWS_REGION }}\n\n    - name: Install\n      run: npm ci\n\n    - name: Build\n      run: npm run build\n\n    - name: Deploy\n      run: |\n        aws s3 sync --cache-control 'max-age=604800' --exclude index.html dist s3://$BUCKET_NAME\n        aws s3 sync --cache-control 'no-cache' dist s3://$BUCKET_NAME\n        aws cloudfront create-invalidation --distribution-id=$DISTRIBUTION_ID --paths / /posts/*\n\nThis github actions job runs the build script and then deploys the dist \ndirectory to S3 and performs a Cloudfront cache invalidation.\n\nConclusion\nThis is a great way to use Ghost for editing a blog but also to compile the\nwebsite and posts into a static website. The editing experience is excellent\nthanks to Ghost and the only technical requirements for writing are node and \nDocker. If you wanted to do something similar you could fork this repo and\nsimply replace my posts with your own. If you also have AWS SAM installed and\nyou're familiar with it you could have a great static blog site deployed in as\nlong as it takes SAM and GitHub Actions to build your templates.\n\nBrymastr/blogContribute to Brymastr/blog development by creating an account on\nGitHub.GitHubBrymastr [https://github.com/Brymastr/blog]","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","author_id":"1","created_at":"2021-05-31 02:39:53","created_by":"1","updated_at":"2021-06-13 00:20:00","updated_by":"1","published_at":"2021-05-31 10:12:00","published_by":"1","custom_excerpt":"This blog was originally a Ghost site hosted in Digital Ocean. I wanted a cheaper, simpler solution so I came up with a method of using the Ghost editor and Next.js to publish a static site and still have a nice editor for writing.","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"60bda8d5931202000137201e","uuid":"a1bb8aa2-4942-46d0-b2e5-eaec8a2a5d0c","title":"Using highlight.js with React and Typescript","slug":"using-highlight-js-in-typescript","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"hr\",{}],[\"code\",{\"code\":\"<pre>\\n  <code class=\\\"language-javascript\\\">\\n    ... javascript code goes here\\n  </code>\\n</pre>\",\"language\":\"html\"}],[\"code\",{\"language\":\"javascript\",\"code\":\"import hljs from 'highlight.js';\\nhljs.highlightAll();\"}],[\"code\",{\"language\":\"javascript\",\"code\":\"import { highlightAll, registerLanguage } from 'highlight.js/lib/core';\\nimport bash from 'highlight.js/lib/languages/bash';\\nimport javascript from 'highlight.js/lib/languages/javascript';\\nimport typescript from 'highlight.js/lib/languages/typescript';\\nimport html from 'highlight.js/lib/languages/xml';\\nimport yaml from 'highlight.js/lib/languages/yaml';\\nimport json from 'highlight.js/lib/languages/json';\\nimport 'highlight.js/styles/tomorrow-night-eighties.css';\"}],[\"code\",{\"language\":\"javascript\",\"code\":\"const blocks = document.querySelectorAll('pre code.hljs');\\nblocks.forEach(block => {\\n  const language = block.result.language;\\n  if (language != undefined)\\n  \\tblock.insertAdjacentHTML('afterbegin', `<label>${language}</label>`);\\n});\"}],[\"bookmark\",{\"url\":\"https://gist.github.com/Brymastr/499e52aec810bbd042e69f378a5f8bbc\",\"metadata\":{\"url\":\"https://gist.github.com/Brymastr/499e52aec810bbd042e69f378a5f8bbc\",\"title\":\"Self-contained highlight.js file. Helpful for use in a typescript project. Framework agnostic.\",\"description\":\"Self-contained highlight.js file. Helpful for use in a typescript project. Framework agnostic. - Highlight.js\",\"author\":\"262588213843476\",\"publisher\":\"Gist\",\"thumbnail\":\"https://github.githubassets.com/images/modules/gists/gist-og-image.png\",\"icon\":\"https://github.githubassets.com/favicons/favicon.svg\"}}]],\"markups\":[[\"a\",[\"href\",\"https://gist.github.com/Brymastr/499e52aec810bbd042e69f378a5f8bbc\"]],[\"code\"],[\"a\",[\"href\",\"https://highlightjs.org/\"]],[\"a\",[\"href\",\"https://github.com/highlightjs/highlight.js/issues/2682\"]],[\"strong\"],[\"a\",[\"href\",\"https://github.com/highlightjs/highlight.js/releases/tag/10.7.3\"]],[\"a\",[\"href\",\"https://highlightjs.org/static/demo/\"]],[\"a\",[\"href\",\"https://css-tricks.com\"]]],\"sections\":[[1,\"h3\",[[0,[],0,\"TLDR:\"]]],[1,\"p\",[[0,[],0,\"Highlight.js is a very common way to style code blocks in HTML websites but it's a little tricky to get working with React and Typescript without additional libraries. I wrote a simple module that will play nicely with Typescript without any other dependencies. \"],[0,[0],1,\"Click here for a gist of my implementation in React.\"]]],[10,0],[1,\"h3\",[[0,[],0,\"Formatting Code Blocks in HTML\"]]],[1,\"p\",[[0,[],0,\"During the recent redesign of this website I found I needed to come up with some interesting methods of styling post content. I use the Ghost editor to write my posts which results in a string of HTML that I render via React's \"],[0,[1],1,\"dangerouslySetInnerHTML\"],[0,[],0,\" attribute. When writing post content that contains markdown code blocks Ghost will turn the code into blocks of HTML that look like this:\"]]],[10,1],[1,\"p\",[[0,[2],1,\"highlight.js\"],[0,[],0,\" is a very popular syntax highlighter for HTML sites. It supports nearly 200 languages, has over 6000 commits, and is still under active development. It is written in vanilla JavaScript but Typescript typings exist via DefinitelyTyped. Peculiarly, typings have also been written in the actual highlightjs project but it seems that the \"],[0,[1],1,\".d.ts\"],[0,[],0,\" declaration file is a few directories deep and that Typescript can't figure it out on its own without some messy tricks. There is a \"],[0,[3],1,\"GitHub issue\"],[0,[],0,\" regarding this problem and it looks like a fix is on its way.\"]]],[1,\"p\",[[0,[4],1,\"Update June, 6 2021: \"],[0,[5],1,\"Release 10.7.3\"],[0,[],0,\" dropped 3 days ago and contains a change addressing the issue with types. Most of this post is still relevant as a clean, modular way of running highlight.js.\"]]],[1,\"h3\",[[0,[],0,\"Usage\"]]],[1,\"p\",[[0,[],0,\"The simplest way of using highlight.js in a modern JavaScript or Typescript project is by importing it as a module and running \"],[0,[1],1,\"highlightAll()\"],[0,[],0,\":\"]]],[10,2],[1,\"p\",[[0,[],0,\"This will work just fine in a framework-less JavaScript or Typescript project. It imports support for all ~200 languages and immediately parses through all html markup in the document and adds a class called \"],[0,[1],1,\"language-[name of any language]\"],[0,[],0,\" where name of any language is the auto-detected language of the code block needing to be highlighted. The downside of this is that importing all of the languages at once is a lot of data to include in your site that is mostly unused. Chances are you're only going to want to format one or a few languages in your site content. For this website I import the library and specific languages like this:\"]]],[10,3],[1,\"p\",[[0,[],0,\"The first line imports the \"],[0,[1],1,\"highlightAll\"],[0,[],0,\" function, which I mentioned above, and also the \"],[0,[1],1,\"registerLanguage\"],[0,[],0,\" function which allows me to register only the languages I care about. The next six lines are where I import specific languages I want to register. The last line is how you import your preferred theme. You can view a demo with all languages and themes \"],[0,[6],1,\"here\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"Then all that's left to do is call the \"],[0,[1],1,\"highlightAll\"],[0,[],0,\" function after all the markup has been loaded. The tricky part here is that with frameworks you generally can't just call this function in a script tag at the bottom of your html document. Easily enough, in React you can call this function in a \"],[0,[1],1,\"useEffect\"],[0,[],0,\" hook in the component that renders html that contains your code blocks.\"]]],[1,\"h3\",[[0,[],0,\"Usage With Typescript\"]]],[1,\"p\",[[0,[],0,\"This is all great with a JavaScript site but the typings issue I mentioned earlier causes red squiggles and build errors when using it in a Typescript app. Typescript doesn't complain when importing from \"],[0,[1],1,\"highlight.js\"],[0,[],0,\" but it freaks out when importing from \"],[0,[1],1,\"hightlight.js/lib\"],[0,[],0,\" which is needed when registering only specific languages. The easiest solution is to drop a \"],[0,[1],1,\"// @ts-ignore\"],[0,[],0,\" in to prevent those errors and to disable any linting rules you may have that prevent its use. The way I get around this by moving all the highlight.js related code to its own JavaScript module, that way there's no type checker complaining about it. Then I can just import the JavaScript module into any \"],[0,[1],1,\"tsx\"],[0,[],0,\" components and I'm good to go. Keep in mind that you may have to configure your \"],[0,[1],1,\"tsconfig.json\"],[0,[],0,\" to allow for JavaScript modules to be used.\"]]],[1,\"p\",[[0,[],0,\"In addition to formatting I wanted to be able to display the name of the language used in the top right corner, similar to how its done in the Ghost editor as well as on \"],[0,[7],1,\"css-tricks.com\"],[0,[],0,\". To do that I add a \"],[0,[1],1,\"<label>\"],[0,[],0,\" element at the \"],[0,[1],1,\"afterbegin\"],[0,[],0,\" position on each code block. This is how that's done:\"]]],[10,4],[1,\"p\",[[0,[],0,\"I bundled all of this highlight.js relevant code up into a module with a default function export and call it in my React component's \"],[0,[1],1,\"useEffect\"],[0,[],0,\" so that the html has already been rendered. Here's gist with a full implementation:\"]]],[10,5]],\"ghostVersion\":\"4.0\"}","html":"<h3 id=\"tldr\">TLDR:</h3><p>Highlight.js is a very common way to style code blocks in HTML websites but it's a little tricky to get working with React and Typescript without additional libraries. I wrote a simple module that will play nicely with Typescript without any other dependencies. <a href=\"https://gist.github.com/Brymastr/499e52aec810bbd042e69f378a5f8bbc\">Click here for a gist of my implementation in React.</a></p><hr><h3 id=\"formatting-code-blocks-in-html\">Formatting Code Blocks in HTML</h3><p>During the recent redesign of this website I found I needed to come up with some interesting methods of styling post content. I use the Ghost editor to write my posts which results in a string of HTML that I render via React's <code>dangerouslySetInnerHTML</code> attribute. When writing post content that contains markdown code blocks Ghost will turn the code into blocks of HTML that look like this:</p><pre><code class=\"language-html\">&lt;pre&gt;\n  &lt;code class=\"language-javascript\"&gt;\n    ... javascript code goes here\n  &lt;/code&gt;\n&lt;/pre&gt;</code></pre><p><a href=\"https://highlightjs.org/\">highlight.js</a> is a very popular syntax highlighter for HTML sites. It supports nearly 200 languages, has over 6000 commits, and is still under active development. It is written in vanilla JavaScript but Typescript typings exist via DefinitelyTyped. Peculiarly, typings have also been written in the actual highlightjs project but it seems that the <code>.d.ts</code> declaration file is a few directories deep and that Typescript can't figure it out on its own without some messy tricks. There is a <a href=\"https://github.com/highlightjs/highlight.js/issues/2682\">GitHub issue</a> regarding this problem and it looks like a fix is on its way.</p><p><strong>Update June, 6 2021: </strong><a href=\"https://github.com/highlightjs/highlight.js/releases/tag/10.7.3\">Release 10.7.3</a> dropped 3 days ago and contains a change addressing the issue with types. Most of this post is still relevant as a clean, modular way of running highlight.js.</p><h3 id=\"usage\">Usage</h3><p>The simplest way of using highlight.js in a modern JavaScript or Typescript project is by importing it as a module and running <code>highlightAll()</code>:</p><pre><code class=\"language-javascript\">import hljs from 'highlight.js';\nhljs.highlightAll();</code></pre><p>This will work just fine in a framework-less JavaScript or Typescript project. It imports support for all ~200 languages and immediately parses through all html markup in the document and adds a class called <code>language-[name of any language]</code> where name of any language is the auto-detected language of the code block needing to be highlighted. The downside of this is that importing all of the languages at once is a lot of data to include in your site that is mostly unused. Chances are you're only going to want to format one or a few languages in your site content. For this website I import the library and specific languages like this:</p><pre><code class=\"language-javascript\">import { highlightAll, registerLanguage } from 'highlight.js/lib/core';\nimport bash from 'highlight.js/lib/languages/bash';\nimport javascript from 'highlight.js/lib/languages/javascript';\nimport typescript from 'highlight.js/lib/languages/typescript';\nimport html from 'highlight.js/lib/languages/xml';\nimport yaml from 'highlight.js/lib/languages/yaml';\nimport json from 'highlight.js/lib/languages/json';\nimport 'highlight.js/styles/tomorrow-night-eighties.css';</code></pre><p>The first line imports the <code>highlightAll</code> function, which I mentioned above, and also the <code>registerLanguage</code> function which allows me to register only the languages I care about. The next six lines are where I import specific languages I want to register. The last line is how you import your preferred theme. You can view a demo with all languages and themes <a href=\"https://highlightjs.org/static/demo/\">here</a>.</p><p>Then all that's left to do is call the <code>highlightAll</code> function after all the markup has been loaded. The tricky part here is that with frameworks you generally can't just call this function in a script tag at the bottom of your html document. Easily enough, in React you can call this function in a <code>useEffect</code> hook in the component that renders html that contains your code blocks.</p><h3 id=\"usage-with-typescript\">Usage With Typescript</h3><p>This is all great with a JavaScript site but the typings issue I mentioned earlier causes red squiggles and build errors when using it in a Typescript app. Typescript doesn't complain when importing from <code>highlight.js</code> but it freaks out when importing from <code>hightlight.js/lib</code> which is needed when registering only specific languages. The easiest solution is to drop a <code>// @ts-ignore</code> in to prevent those errors and to disable any linting rules you may have that prevent its use. The way I get around this by moving all the highlight.js related code to its own JavaScript module, that way there's no type checker complaining about it. Then I can just import the JavaScript module into any <code>tsx</code> components and I'm good to go. Keep in mind that you may have to configure your <code>tsconfig.json</code> to allow for JavaScript modules to be used.</p><p>In addition to formatting I wanted to be able to display the name of the language used in the top right corner, similar to how its done in the Ghost editor as well as on <a href=\"https://css-tricks.com\">css-tricks.com</a>. To do that I add a <code>&lt;label&gt;</code> element at the <code>afterbegin</code> position on each code block. This is how that's done:</p><pre><code class=\"language-javascript\">const blocks = document.querySelectorAll('pre code.hljs');\nblocks.forEach(block =&gt; {\n  const language = block.result.language;\n  if (language != undefined)\n  \tblock.insertAdjacentHTML('afterbegin', `&lt;label&gt;${language}&lt;/label&gt;`);\n});</code></pre><p>I bundled all of this highlight.js relevant code up into a module with a default function export and call it in my React component's <code>useEffect</code> so that the html has already been rendered. Here's gist with a full implementation:</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://gist.github.com/Brymastr/499e52aec810bbd042e69f378a5f8bbc\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Self-contained highlight.js file. Helpful for use in a typescript project. Framework agnostic.</div><div class=\"kg-bookmark-description\">Self-contained highlight.js file. Helpful for use in a typescript project. Framework agnostic. - Highlight.js</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://github.githubassets.com/favicons/favicon.svg\"><span class=\"kg-bookmark-author\">Gist</span><span class=\"kg-bookmark-publisher\">262588213843476</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://github.githubassets.com/images/modules/gists/gist-og-image.png\"></div></a></figure>","comment_id":"60bda8d5931202000137201e","plaintext":"TLDR:\nHighlight.js is a very common way to style code blocks in HTML websites but it's\na little tricky to get working with React and Typescript without additional\nlibraries. I wrote a simple module that will play nicely with Typescript without\nany other dependencies. Click here for a gist of my implementation in React.\n[https://gist.github.com/Brymastr/499e52aec810bbd042e69f378a5f8bbc]\n\n\n--------------------------------------------------------------------------------\n\nFormatting Code Blocks in HTML\nDuring the recent redesign of this website I found I needed to come up with some\ninteresting methods of styling post content. I use the Ghost editor to write my\nposts which results in a string of HTML that I render via React's \ndangerouslySetInnerHTML attribute. When writing post content that contains\nmarkdown code blocks Ghost will turn the code into blocks of HTML that look like\nthis:\n\n<pre>\n  <code class=\"language-javascript\">\n    ... javascript code goes here\n  </code>\n</pre>\n\nhighlight.js [https://highlightjs.org/] is a very popular syntax highlighter for\nHTML sites. It supports nearly 200 languages, has over 6000 commits, and is\nstill under active development. It is written in vanilla JavaScript but\nTypescript typings exist via DefinitelyTyped. Peculiarly, typings have also been\nwritten in the actual highlightjs project but it seems that the .d.ts \ndeclaration file is a few directories deep and that Typescript can't figure it\nout on its own without some messy tricks. There is a GitHub issue\n[https://github.com/highlightjs/highlight.js/issues/2682] regarding this problem\nand it looks like a fix is on its way.\n\nUpdate June, 6 2021: Release 10.7.3\n[https://github.com/highlightjs/highlight.js/releases/tag/10.7.3] dropped 3 days\nago and contains a change addressing the issue with types. Most of this post is\nstill relevant as a clean, modular way of running highlight.js.\n\nUsage\nThe simplest way of using highlight.js in a modern JavaScript or Typescript\nproject is by importing it as a module and running highlightAll():\n\nimport hljs from 'highlight.js';\nhljs.highlightAll();\n\nThis will work just fine in a framework-less JavaScript or Typescript project.\nIt imports support for all ~200 languages and immediately parses through all\nhtml markup in the document and adds a class called language-[name of any\nlanguage] where name of any language is the auto-detected language of the code\nblock needing to be highlighted. The downside of this is that importing all of\nthe languages at once is a lot of data to include in your site that is mostly\nunused. Chances are you're only going to want to format one or a few languages\nin your site content. For this website I import the library and specific\nlanguages like this:\n\nimport { highlightAll, registerLanguage } from 'highlight.js/lib/core';\nimport bash from 'highlight.js/lib/languages/bash';\nimport javascript from 'highlight.js/lib/languages/javascript';\nimport typescript from 'highlight.js/lib/languages/typescript';\nimport html from 'highlight.js/lib/languages/xml';\nimport yaml from 'highlight.js/lib/languages/yaml';\nimport json from 'highlight.js/lib/languages/json';\nimport 'highlight.js/styles/tomorrow-night-eighties.css';\n\nThe first line imports the highlightAll function, which I mentioned above, and\nalso the registerLanguage function which allows me to register only the\nlanguages I care about. The next six lines are where I import specific languages\nI want to register. The last line is how you import your preferred theme. You\ncan view a demo with all languages and themes here\n[https://highlightjs.org/static/demo/].\n\nThen all that's left to do is call the highlightAll function after all the\nmarkup has been loaded. The tricky part here is that with frameworks you\ngenerally can't just call this function in a script tag at the bottom of your\nhtml document. Easily enough, in React you can call this function in a useEffect \nhook in the component that renders html that contains your code blocks.\n\nUsage With Typescript\nThis is all great with a JavaScript site but the typings issue I mentioned\nearlier causes red squiggles and build errors when using it in a Typescript app.\nTypescript doesn't complain when importing from highlight.js but it freaks out\nwhen importing from hightlight.js/lib which is needed when registering only\nspecific languages. The easiest solution is to drop a // @ts-ignore in to\nprevent those errors and to disable any linting rules you may have that prevent\nits use. The way I get around this by moving all the highlight.js related code\nto its own JavaScript module, that way there's no type checker complaining about\nit. Then I can just import the JavaScript module into any tsx components and I'm\ngood to go. Keep in mind that you may have to configure your tsconfig.json to\nallow for JavaScript modules to be used.\n\nIn addition to formatting I wanted to be able to display the name of the\nlanguage used in the top right corner, similar to how its done in the Ghost\neditor as well as on css-tricks.com [https://css-tricks.com]. To do that I add a \n<label> element at the afterbegin position on each code block. This is how\nthat's done:\n\nconst blocks = document.querySelectorAll('pre code.hljs');\nblocks.forEach(block => {\n  const language = block.result.language;\n  if (language != undefined)\n  \tblock.insertAdjacentHTML('afterbegin', `<label>${language}</label>`);\n});\n\nI bundled all of this highlight.js relevant code up into a module with a default\nfunction export and call it in my React component's useEffect so that the html\nhas already been rendered. Here's gist with a full implementation:\n\nSelf-contained highlight.js file. Helpful for use in a typescript project.\nFramework agnostic.Self-contained highlight.js file. Helpful for use in a\ntypescript project. Framework agnostic. - Highlight.jsGist262588213843476\n[https://gist.github.com/Brymastr/499e52aec810bbd042e69f378a5f8bbc]","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","email_recipient_filter":"none","author_id":"1","created_at":"2021-06-07 05:04:21","created_by":"1","updated_at":"2021-06-09 21:17:44","updated_by":"1","published_at":"2021-06-07 06:12:39","published_by":"1","custom_excerpt":"Highlight.js is a very common way to style code blocks in HTML websites but it's a little tricky to get working with React and Typescript without additional libraries. I wrote a simple module that plays nicely with Typescript without any other dependencies.","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"60c550faccc0c20001ae8dac","uuid":"a3b854b2-abaa-48d2-aec3-dfc975674db9","title":"asdf","slug":"asdf","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[],\"sections\":[[1,\"p\",[]]],\"ghostVersion\":\"4.0\"}","html":null,"comment_id":"60c550faccc0c20001ae8dac","plaintext":null,"feature_image":null,"featured":0,"type":"post","status":"draft","locale":null,"visibility":"public","email_recipient_filter":"none","author_id":"1","created_at":"2021-06-13 00:27:38","created_by":"1","updated_at":"2021-06-13 00:46:52","updated_by":"1","published_at":null,"published_by":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null}],"posts_meta":[],"users":[{"id":"1","name":"Brycen Dorsay","slug":"brycen","password":"$2a$10$r8OUd8WqZlTakB7kQKhlhuBXosrf0fiRcYMW7LHztu1t.D45Zr/.e","email":"dorsay@live.ca","profile_image":null,"cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"accessibility":"{\"nightShift\":true}","status":"active","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"tour":null,"last_seen":"2021-06-13 00:19:04","created_at":"2021-05-29 21:23:00","created_by":"1","updated_at":"2021-06-13 00:19:04","updated_by":"1"},{"id":"5951f5fca366002ebd5dbef7","name":"Ghost","slug":"ghost","password":"$2a$10$yREwrzWPGLzX9OubPRxB7OulblIwB8.uDQP6/RCXDD56KrBBaQmPG","email":"ghost-author@example.com","profile_image":"https://static.ghost.org/v4.0.0/images/ghost-user.png","cover_image":null,"bio":"You can delete this user to remove all the welcome posts","website":"https://ghost.org","location":"The Internet","facebook":"ghost","twitter":"ghost","accessibility":null,"status":"active","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"tour":null,"last_seen":null,"created_at":"2021-05-29 21:23:00","created_by":"1","updated_at":"2021-05-29 21:23:00","updated_by":"1"}],"posts_authors":[{"id":"60b2b0b5606a36000159f078","post_id":"60b2b0b5606a36000159f077","author_id":"5951f5fca366002ebd5dbef7","sort_order":0},{"id":"60b2b0b5606a36000159f07a","post_id":"60b2b0b5606a36000159f079","author_id":"5951f5fca366002ebd5dbef7","sort_order":0},{"id":"60b2b0b5606a36000159f07c","post_id":"60b2b0b5606a36000159f07b","author_id":"5951f5fca366002ebd5dbef7","sort_order":0},{"id":"60b2b0b5606a36000159f07e","post_id":"60b2b0b5606a36000159f07d","author_id":"5951f5fca366002ebd5dbef7","sort_order":0},{"id":"60b2c7338e987b0001441825","post_id":"60b2c7338e987b0001441824","author_id":"1","sort_order":0},{"id":"60b2c8d6351df9000153b62e","post_id":"60b2c8d6351df9000153b62d","author_id":"1","sort_order":0},{"id":"60b2c95c351df9000153b643","post_id":"60b2c95c351df9000153b642","author_id":"1","sort_order":0},{"id":"60b2ca70351df9000153b682","post_id":"60b2ca70351df9000153b681","author_id":"1","sort_order":0},{"id":"60b2cb89351df9000153b6dc","post_id":"60b2cb89351df9000153b6db","author_id":"1","sort_order":0},{"id":"60b44c79f96b6500014611e4","post_id":"60b44c79f96b6500014611e3","author_id":"1","sort_order":0},{"id":"60bda8d5931202000137201f","post_id":"60bda8d5931202000137201e","author_id":"1","sort_order":0},{"id":"60c550faccc0c20001ae8dad","post_id":"60c550faccc0c20001ae8dac","author_id":"1","sort_order":0}],"roles":[{"id":"60b2b0b4606a36000159f00b","name":"Administrator","description":"Administrators","created_at":"2021-05-29 21:23:00","created_by":"1","updated_at":"2021-05-29 21:23:00","updated_by":"1"},{"id":"60b2b0b4606a36000159f00c","name":"Editor","description":"Editors","created_at":"2021-05-29 21:23:00","created_by":"1","updated_at":"2021-05-29 21:23:00","updated_by":"1"},{"id":"60b2b0b4606a36000159f00d","name":"Author","description":"Authors","created_at":"2021-05-29 21:23:00","created_by":"1","updated_at":"2021-05-29 21:23:00","updated_by":"1"},{"id":"60b2b0b4606a36000159f00e","name":"Contributor","description":"Contributors","created_at":"2021-05-29 21:23:00","created_by":"1","updated_at":"2021-05-29 21:23:00","updated_by":"1"},{"id":"60b2b0b4606a36000159f00f","name":"Owner","description":"Blog Owner","created_at":"2021-05-29 21:23:00","created_by":"1","updated_at":"2021-05-29 21:23:00","updated_by":"1"},{"id":"60b2b0b4606a36000159f010","name":"Admin Integration","description":"External Apps","created_at":"2021-05-29 21:23:00","created_by":"1","updated_at":"2021-05-29 21:23:00","updated_by":"1"},{"id":"60b2b0b4606a36000159f011","name":"DB Backup Integration","description":"Internal DB Backup Client","created_at":"2021-05-29 21:23:00","created_by":"1","updated_at":"2021-05-29 21:23:00","updated_by":"1"},{"id":"60b2b0b4606a36000159f012","name":"Scheduler Integration","description":"Internal Scheduler Client","created_at":"2021-05-29 21:23:00","created_by":"1","updated_at":"2021-05-29 21:23:00","updated_by":"1"}],"roles_users":[{"id":"60b2b0b4606a36000159f068","role_id":"60b2b0b4606a36000159f00e","user_id":"5951f5fca366002ebd5dbef7"},{"id":"60b2b0b5606a36000159f172","role_id":"60b2b0b4606a36000159f00f","user_id":"1"}],"settings":[{"id":"60b2b0b5606a36000159f173","group":"core","key":"db_hash","value":"7807ae89-f0bc-49b0-8db4-d729dcb4c088","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f174","group":"core","key":"routes_hash","value":"3d180d52c663d173a6be791ef411ed01","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:02","updated_by":"1"},{"id":"60b2b0b5606a36000159f175","group":"core","key":"next_update_check","value":"1623629944","type":"number","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-06-13 00:19:04","updated_by":"1"},{"id":"60b2b0b5606a36000159f176","group":"core","key":"notifications","value":"[{\"dismissible\":true,\"location\":\"bottom\",\"status\":\"alert\",\"id\":\"39955fd0-c87d-11eb-b218-417f1bcaa6ba\",\"custom\":false,\"createdAt\":\"2021-06-08T16:16:12.000Z\",\"type\":\"info\",\"top\":false,\"message\":\"Ghost <a href=\\\"https://github.com/TryGhost/Ghost/releases\\\">4.7.0</a> has been released, <a href=\\\"https://ghost.org/update/?v=4.6.4\\\">click here</a> to upgrade.\",\"seen\":false,\"addedAt\":\"2021-06-08T20:53:24.648Z\"}]","type":"array","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-06-08 20:53:24","updated_by":"1"},{"id":"60b2b0b5606a36000159f177","group":"core","key":"session_secret","value":"c6ed42e365d474cc1c790a8c86c8360a66263a4a635c4a27224046814e45f564","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f178","group":"core","key":"theme_session_secret","value":"eaa09b6b31ba86db85eaac6f49ee382d0d2c7ff2bd0129a992fb19ea35359cd7","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f179","group":"core","key":"ghost_public_key","value":"-----BEGIN RSA PUBLIC KEY-----\nMIGJAoGBAIHtmgEk+GU5nykzrcDKDD+rJXmfSn1nX828gXnb4kVnQ7otCDKD5aIb21c/kBGy\nJUoiB6U62lFBi4vdc2WK/cT6VR/Eq3+3vW7S6R3r8xrHikPXLdl24hs/IrCrPkiPla7w0gV3\ncwV3qE52Ic2PRAl0+aq1GMPUh9DTKCLaUbKHAgMBAAE=\n-----END RSA PUBLIC KEY-----\n","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f17a","group":"core","key":"ghost_private_key","value":"-----BEGIN RSA PRIVATE KEY-----\nMIICXQIBAAKBgQCB7ZoBJPhlOZ8pM63Aygw/qyV5n0p9Z1/NvIF52+JFZ0O6LQgyg+WiG9tX\nP5ARsiVKIgelOtpRQYuL3XNliv3E+lUfxKt/t71u0ukd6/Max4pD1y3ZduIbPyKwqz5Ij5Wu\n8NIFd3MFd6hOdiHNj0QJdPmqtRjD1IfQ0ygi2lGyhwIDAQABAoGAJV9V1AxxUpSPfod57CFy\nAoJVJjW2dHneqcwWJhokbLg2WAAKApXD4KxInEERTLXEWh2Nu25BS+whmpqZTdT8B1lmv8PE\n+0T8WCdHlyl+uTweUHXU4NzcizA4PJaYkOxV9ce1pQJ3I0OgU71KO5/GBM3aWKaB5IF48DaJ\n3L9Od/kCQQDXXveG7olX6kj3O0pgX8AkaoyszAKEvyJ3j4SYqayKLWR5s+jffrdhw7+a4EZX\ndCGFvHeTgisKagrBEL2chbp7AkEAmnBLiud3xEhbRiopFesgXeXzfJsHqVdghZVAphmUXPzQ\n1QTQzRP2zxPkwZ3xR3YbIjCapC52vTINnkBc7ZNgZQJAHBdC6dKLD3B7e+O7274hbZ6IIrGp\nUm8rq7SIcvEOlCc/h7Azm5MHkDTb9PNzuUxoYu0mG5NK0dzq8iugz52RqQJBAJH1vb+7Abt1\nsyX+JLR9cyqrcNL8ZmJKnYPCysXw+QJlQi2BjqGz05hksde3oVirq/tFOnIfI8Ot8ab2J521\nou0CQQC0WW2RrYkkzullX6ae65mbItlr7aUIrhRlw+HuPb7n4q7V8ZOVRTD34BFQCfC8QC6W\nkaKal5BknUq+yikOSNR5\n-----END RSA PRIVATE KEY-----\n","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f17b","group":"core","key":"members_public_key","value":"-----BEGIN RSA PUBLIC KEY-----\nMIGJAoGBALC08YyzYN3vE/lQv/EBazHJOaMqjCl4PhZSE2EPkRZYOHa6iiZ3Sr5eEb69grcK\nCLTIMk7QiaWPBnYarhD3T4COkhq44zaJ84tTBWC5GCLWiTTK8Cpmo1RBAuWzGShJcFIALSOA\nCUiJ5b1ootdFARBQZD7odzdn+flkEjf7ArsfAgMBAAE=\n-----END RSA PUBLIC KEY-----\n","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f17c","group":"core","key":"members_private_key","value":"-----BEGIN RSA PRIVATE KEY-----\nMIICXAIBAAKBgQCwtPGMs2Dd7xP5UL/xAWsxyTmjKowpeD4WUhNhD5EWWDh2uoomd0q+XhG+\nvYK3Cgi0yDJO0ImljwZ2Gq4Q90+AjpIauOM2ifOLUwVguRgi1ok0yvAqZqNUQQLlsxkoSXBS\nAC0jgAlIieW9aKLXRQEQUGQ+6Hc3Z/n5ZBI3+wK7HwIDAQABAoGAF7+51xckpa9EF/XqVhHC\nvmY1AODvBYPLlGRjhl/5N++TZyGa/6B4wy0RZXlC4CbRFLrzR/RvC3k1fRoI2u7iGEO43b5s\nl/lZhS9IgmXtt0PfbIPASqLc85Tf0sxT0mi35DWyOPs95LSUQ3qhPmMxgEk3oqPfwGdc2L5a\nyDM1IAECQQDl7iXPPTyFFcFdaYmpe7MXQc2pfZ+h9+BlQ1BTi5qsivh+18yzia4+anF2r3Y8\n5rX81h3khBCf4XLlaBtqlnEfAkEAxL30s2d59mgtr3S6gcXn6WcDhYWnvbTMZNVzEqFaj1fW\nNC8DKrM5CAYbYadRF3PFNGZ9OOTX/AbZ3/x21rh2AQJBAJWR/XZ6V0wbgtXJOYvOtAmE/Mws\ntBMgtBArYa13Ov7SyCN7LeX8wiRICdcy/K9RRUFb58YnQsk+Vwd0WaFUi/ECQQAMCPa0Fste\nKGdLCV/zWlDidTvA6jkloK60KF5+sEIi7KOc05dlAEun0v/PzHVoctuIZhCY717K+vxO+Fmo\nruYBAj9vxnmt5h5dbPzFq+4rq7PT7tslr40TcQVmjWjZXBX5IzYXbnMU6BzBs+lCOld54Vpm\nY4nRWQys0ose+x1zLYY=\n-----END RSA PRIVATE KEY-----\n","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f17d","group":"core","key":"members_email_auth_secret","value":"10381c5ba8de3a77b6dea0ab00e5cebf568f709bac3ba0e326754f3af7cf67a150609ab70670187abfced1931d19e0c1697ba7c01d38b4d89bd7fbbad25820a5","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f180","group":"site","key":"title","value":"dorsay.dev","type":"string","flags":"PUBLIC","created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:31:13","updated_by":"1"},{"id":"60b2b0b5606a36000159f181","group":"site","key":"description","value":"Thoughts, stories and ideas.","type":"string","flags":"PUBLIC","created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:31:13","updated_by":"1"},{"id":"60b2b0b5606a36000159f182","group":"site","key":"logo","value":"","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f183","group":"site","key":"cover_image","value":"https://static.ghost.org/v4.0.0/images/publication-cover.jpg","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f184","group":"site","key":"icon","value":"","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f185","group":"site","key":"accent_color","value":"#FF1A75","type":"string","flags":"PUBLIC","created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f186","group":"site","key":"lang","value":"en","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f187","group":"site","key":"timezone","value":"Etc/UTC","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f188","group":"site","key":"codeinjection_head","value":"","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f189","group":"site","key":"codeinjection_foot","value":"","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f18a","group":"site","key":"facebook","value":"ghost","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f18b","group":"site","key":"twitter","value":"@ghost","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f18c","group":"site","key":"navigation","value":"[{\"label\":\"Home\",\"url\":\"/\"},{\"label\":\"About\",\"url\":\"/about/\"},{\"label\":\"Collection\",\"url\":\"/tag/getting-started/\"},{\"label\":\"Author\",\"url\":\"/author/ghost/\"},{\"label\":\"Portal\",\"url\":\"/portal/\"}]","type":"array","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f18d","group":"site","key":"secondary_navigation","value":"[{\"label\":\"Data & privacy\",\"url\":\"/privacy/\"},{\"label\":\"Contact\",\"url\":\"/contact/\"},{\"label\":\"Contribute →\",\"url\":\"/contribute/\"}]","type":"array","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f18e","group":"site","key":"meta_title","value":null,"type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f18f","group":"site","key":"meta_description","value":null,"type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f190","group":"site","key":"og_image","value":null,"type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f191","group":"site","key":"og_title","value":null,"type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f192","group":"site","key":"og_description","value":null,"type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f193","group":"site","key":"twitter_image","value":null,"type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f194","group":"site","key":"twitter_title","value":null,"type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f195","group":"site","key":"twitter_description","value":null,"type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f196","group":"theme","key":"active_theme","value":"casper","type":"string","flags":"RO","created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f197","group":"private","key":"is_private","value":"false","type":"boolean","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f198","group":"private","key":"password","value":"","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f199","group":"private","key":"public_hash","value":"38caa6b321fa6c7897bbf0e3260fa1","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f19a","group":"members","key":"default_content_visibility","value":"public","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f19b","group":"members","key":"members_signup_access","value":"all","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f19c","group":"members","key":"members_from_address","value":"noreply","type":"string","flags":"RO","created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f19d","group":"members","key":"members_support_address","value":"noreply","type":"string","flags":"PUBLIC,RO","created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f19e","group":"members","key":"members_reply_address","value":"newsletter","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f19f","group":"members","key":"members_free_signup_redirect","value":"/","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f1a0","group":"members","key":"members_paid_signup_redirect","value":"/","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f1a1","group":"members","key":"stripe_product_name","value":"Ghost Subscription","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f1a4","group":"members","key":"stripe_plans","value":"[]","type":"array","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f1a7","group":"members","key":"stripe_connect_livemode","value":null,"type":"boolean","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f1a8","group":"members","key":"stripe_connect_display_name","value":null,"type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f1aa","group":"members","key":"members_free_price_name","value":"Free","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f1ab","group":"members","key":"members_free_price_description","value":"Free preview","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f1ac","group":"members","key":"members_monthly_price_id","value":null,"type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f1ad","group":"members","key":"members_yearly_price_id","value":null,"type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f1ae","group":"portal","key":"portal_name","value":"true","type":"boolean","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f1af","group":"portal","key":"portal_button","value":"true","type":"boolean","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f1b0","group":"portal","key":"portal_plans","value":"[\"free\"]","type":"array","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f1b1","group":"portal","key":"portal_button_style","value":"icon-and-text","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f1b2","group":"portal","key":"portal_button_icon","value":null,"type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f1b3","group":"portal","key":"portal_button_signup_text","value":"Subscribe","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f1b4","group":"email","key":"mailgun_domain","value":null,"type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f1b5","group":"email","key":"mailgun_api_key","value":null,"type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f1b6","group":"email","key":"mailgun_base_url","value":null,"type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f1b7","group":"email","key":"email_track_opens","value":"true","type":"boolean","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f1b8","group":"amp","key":"amp","value":"true","type":"boolean","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f1b9","group":"amp","key":"amp_gtag_id","value":null,"type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f1ba","group":"firstpromoter","key":"firstpromoter","value":"false","type":"boolean","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f1bb","group":"firstpromoter","key":"firstpromoter_id","value":null,"type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f1bc","group":"slack","key":"slack_url","value":"","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f1bd","group":"slack","key":"slack_username","value":"Ghost","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f1be","group":"unsplash","key":"unsplash","value":"true","type":"boolean","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f1bf","group":"views","key":"shared_views","value":"[]","type":"array","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f1c0","group":"newsletter","key":"newsletter_show_badge","value":"true","type":"boolean","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f1c1","group":"newsletter","key":"newsletter_show_header","value":"true","type":"boolean","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f1c2","group":"newsletter","key":"newsletter_body_font_category","value":"sans_serif","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f1c3","group":"newsletter","key":"newsletter_footer_content","value":"","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f1c6","group":"editor","key":"editor_default_email_recipients","value":"visibility","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"},{"id":"60b2b0b5606a36000159f1c7","group":"editor","key":"editor_default_email_recipients_filter","value":"all","type":"string","flags":null,"created_at":"2021-05-29 21:23:01","created_by":"1","updated_at":"2021-05-29 21:23:01","updated_by":"1"}],"tags":[{"id":"60b2b0b4606a36000159f00a","name":"Getting Started","slug":"getting-started","description":null,"feature_image":null,"parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2021-05-29 21:23:00","created_by":"1","updated_at":"2021-05-29 21:23:00","updated_by":"1"}],"posts_tags":[]}}