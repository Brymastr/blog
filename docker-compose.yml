version: "3.8"

services:
  proxy:
    image: traefik:v2.2
    restart: unless-stopped
    environment:
      DO_AUTH_TOKEN: ${DO_AUTH_TOKEN}
      DO_PROPAGATION_TIMEOUT: 600
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /home/brycen/config/${NODE_ENV}/traefik.yml:/etc/traefik/traefik.yml
      - /home/brycen/acme.json:/acme.json
    labels:
      traefik.http.routers.traefik.rule: Host(`traefik.${DOMAIN}`)
      traefik.http.routers.traefik.service: api@internal
      traefik.http.routers.traefik.middlewares: auth
      traefik.http.routers.traefik.tls: "true"
      traefik.http.routers.traefik.tls.certresolver: default
      traefik.http.middlewares.auth.basicauth.users: admin:${TRAEFIK_PASSWORD}
      traefik.http.services.proxy.loadbalancer.server.port: 8080

      traefik.http.routers.wildcard-certs.tls.domains[0].main: ${DOMAIN}
      traefik.http.routers.wildcard-certs.tls.domains[0].sans: "*.${DOMAIN}"

  portainer:
    image: portainer/portainer:1.24.1
    volumes:
      - portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      traefik.http.services.portainer.loadbalancer.server.port: 9000
      traefik.http.routers.portainer.tls: "true"
      traefik.http.routers.portainer.rule: Host(`portainer.${DOMAIN}`)
      traefik.http.routers.portainer.tls.certresolver: default

  ghost:
    image: ghost:3-alpine
    restart: unless-stopped
    volumes:
      - /home/brycen/themes/:/var/lib/ghost/content/themes/
      - /home/brycen/content/:/var/lib/ghost/content/
    environment:
      NODE_ENV: ${NODE_ENV}
      url: ${PROTO}://${DOMAIN}
      database__client: mysql
      database__connection__host: db
      database__connection__user: root
      database__connection__password: ${DB_PASSWORD}
      database__connection__database: ghost
    labels:
      traefik.http.routers.ghost.rule: Host(`${DOMAIN}`)
      traefik.http.routers.ghost.tls: "true"
      traefik.http.routers.ghost.tls.certresolver: default
      traefik.http.services.ghost.loadbalancer.server.port: 2368

  db:
    image: mariadb
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
    volumes:
      - data:/var/lib/mysql
    labels:
      traefik.enable: "false"

  spiral:
    image: brymastr/spiral
    restart: unless-stopped
    labels:
      traefik.http.routers.spiral.rule: Host(`spiral.${DOMAIN}`)
      traefik.http.routers.spiral.tls: "true"
      traefik.http.routers.spiral.tls.certresolver: default
      traefik.http.services.spiral.loadbalancer.server.port: 80

  primes:
    image: brymastr/primes
    restart: unless-stopped
    labels:
      traefik.http.routers.primes.rule: Host(`primes.${DOMAIN}`)
      traefik.http.routers.primes.tls: "true"
      traefik.http.routers.primes.tls.certresolver: default
      traefik.http.services.primes.loadbalancer.server.port: 80

  halloween:
    build: ./halloween/
    restart: unless-stopped
    labels:
      traefik.http.routers.halloween.rule: Host(`halloween.${DOMAIN}`)
      traefik.http.routers.halloween.tls: "true"
      traefik.http.routers.halloween.tls.certresolver: default
      traefik.http.services.halloween.loadbalancer.server.port: 80

  whoami:
    image: containous/whoami
    labels:
      traefik.http.routers.whoami.rule: Host(`whoami.${DOMAIN}`)
      traefik.http.routers.whoami.tls: "true"
      traefik.http.routers.whoami.tls.certresolver: default
      traefik.http.services.whoami.loadbalancer.server.port: 80

  wealth-for-ynab-web:
    image: docker.pkg.github.com/brymastr/wealth-for-ynab/wealth-for-ynab-web:ui
    restart: unless-stopped
    labels:
      traefik.http.routers.wealth-for-ynab-web.rule: Host(`wealth.${DOMAIN}`)
      traefik.http.routers.wealth-for-ynab-web.tls: "true"
      traefik.http.routers.wealth-for-ynab-web.tls.certresolver: default
      traefik.http.services.wealth-for-ynab-web.loadbalancer.server.port: 3000

  wealth-for-ynab-api:
    image: docker.pkg.github.com/brymastr/wealth-for-ynab/wealth-for-ynab-api:ui
    restart: unless-stopped
    environment:
      clientId: ${clientId}
      clientSecret: ${clientSecret}
      authRedirectUri: ${authRedirectUri}
      clientRedirectUri: ${clientRedirectUri}
      forecastUrl: http://wealth-for-ynab-forecast:3000
    labels:
      traefik.http.routers.wealth-for-ynab-api.rule: Host(`wealth.${DOMAIN}`) && PathPrefix(`/api/`)
      traefik.http.routers.wealth-for-ynab-api.tls: "true"
      traefik.http.routers.wealth-for-ynab-api.tls.certresolver: default
      traefik.http.services.wealth-for-ynab-api.loadbalancer.server.port: 3000

  wealth-for-ynab-forecast:
    image: docker.pkg.github.com/brymastr/wealth-for-ynab/wealth-for-ynab-forecast:ui
    restart: unless-stopped
    labels:
      traefik.enable: "false"

volumes:
  data:
  portainer:
