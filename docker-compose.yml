version: "3.7"

services:
  proxy:
    image: traefik:v2.2
    restart: unless-stopped
    environment:
      DO_AUTH_TOKEN: ${DO_AUTH_TOKEN}
      DO_PROPAGATION_TIMEOUT: 600
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${PWD}/config/${NODE_ENV}/traefik.yml:/etc/traefik/traefik.yml
      - ${PWD}/acme.json:/acme.json
    labels:
      traefik.http.routers.traefik.rule: Host(`traefik.${DOMAIN}`)
      traefik.http.routers.traefik.service: api@internal
      traefik.http.routers.traefik.middlewares: auth
      traefik.http.routers.traefik.tls: "true"
      traefik.http.routers.traefik.tls.certresolver: default
      traefik.http.middlewares.auth.basicauth.users: admin:${TRAEFIK_PASSWORD}
      traefik.http.services.proxy.loadbalancer.server.port: 8080

      traefik.http.routers.wildcard-certs.tls.domains[0].main: ${DOMAIN}
      traefik.http.routers.wildcard-certs.tls.domains[0].sans: "*.${DOMAIN}"

  ghost:
    image: ghost:3-alpine
    restart: unless-stopped
    volumes:
      - ./themes/:/var/lib/ghost/content/themes/
      - ./content/:/var/lib/ghost/content/
    environment:
      NODE_ENV: ${NODE_ENV}
      url: ${PROTO}://${DOMAIN}
    labels:
      traefik.http.routers.ghost.rule: Host(`${DOMAIN}`)
      traefik.http.routers.ghost.tls: "true"
      traefik.http.routers.ghost.tls.certresolver: default
      traefik.http.services.ghost.loadbalancer.server.port: 2368

  db:
    image: mariadb
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
    volumes:
      - data:/var/lib/mysql
    labels:
      traefik.enable: "false"

  spiral:
    image: brymastr/spiral
    restart: unless-stopped
    labels:
      traefik.http.routers.spiral.rule: Host(`spiral.${DOMAIN}`)
      traefik.http.routers.spiral.tls: "true"
      traefik.http.routers.spiral.tls.certresolver: default
      traefik.http.services.spiral.loadbalancer.server.port: 80

  primes:
    image: brymastr/primes
    restart: unless-stopped
    labels:
      traefik.http.routers.primes.rule: Host(`primes.${DOMAIN}`)
      traefik.http.routers.primes.tls: "true"
      traefik.http.routers.primes.tls.certresolver: default
      traefik.http.services.primes.loadbalancer.server.port: 80

  halloween:
    build: ./halloween/
    restart: unless-stopped
    labels:
      traefik.http.routers.halloween.rule: Host(`halloween.${DOMAIN}`)
      traefik.http.routers.halloween.tls: "true"
      traefik.http.routers.halloween.tls.certresolver: default
      traefik.http.services.halloween.loadbalancer.server.port: 80

  whoami:
    image: containous/whoami
    labels:
      traefik.http.routers.whoami.rule: Host(`whoami.${DOMAIN}`)
      traefik.http.routers.whoami.tls: "true"
      traefik.http.routers.whoami.tls.certresolver: default
      traefik.http.services.whoami.loadbalancer.server.port: 80

  net-worth-web:
    image: brymastr/net-worth-web
    restart: unless-stopped
    labels:
      traefik.http.routers.net-worth-web.rule: Host(`net-worth.${DOMAIN}`)
      traefik.http.routers.net-worth-web.tls: "true"
      traefik.http.routers.net-worth-web.tls.certresolver: default
      traefik.http.services.net-worth-web.loadbalancer.server.port: 80

  net-worth-api:
    image: brymastr/net-worth-api
    restart: unless-stopped
    labels:
      traefik.http.routers.net-worth-api.rule: Host(`net-worth.${DOMAIN}`) && PathPrefix(`/api/`)
      traefik.http.routers.net-worth-api.tls: "true"
      traefik.http.routers.net-worth-api.tls.certresolver: default
      traefik.http.services.net-worth-api.loadbalancer.server.port: 3000

volumes:
  data:
